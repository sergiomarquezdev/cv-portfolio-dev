name: 🔍 Health Monitor & Alerts (Cloudflare Pages)

on:
  schedule:
    # Run every 6 hours to monitor site health
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  health-monitor:
    name: 🏥 Continuous Health Monitor
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 🔍 Site availability check
        id: health_check
        run: |
          echo "🔍 Checking site health..."

          # Initialize counters
          FAILED_CHECKS=0
          TOTAL_CHECKS=0

          # Function to check URL
          check_url() {
            local url=$1
            local name=$2
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

            if curl -f -s -o /dev/null --max-time 10 "$url"; then
              echo "✅ $name: OK"
              return 0
            else
              echo "❌ $name: FAILED"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              return 1
            fi
          }

          # Check main endpoints
          check_url "https://cv.sergiomarquez.dev" "Homepage"
          check_url "https://cv.sergiomarquez.dev/blog" "Blog Page"
          check_url "https://cv.sergiomarquez.dev/github" "GitHub Redirect"
          check_url "https://cv.sergiomarquez.dev/linkedin" "LinkedIn Redirect"

          # Set outputs for next steps
          echo "failed_checks=$FAILED_CHECKS" >> $GITHUB_OUTPUT
          echo "total_checks=$TOTAL_CHECKS" >> $GITHUB_OUTPUT

          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "⚠️ Health check failed: $FAILED_CHECKS/$TOTAL_CHECKS checks failed"
            exit 1
          else
            echo "✅ All health checks passed: $TOTAL_CHECKS/$TOTAL_CHECKS"
          fi

      - name: 📊 Performance monitoring
        if: success()
        run: |
          echo "📊 Performance check..."

          # Measure homepage load time
          START_TIME=$(date +%s%N)
          curl -f -s -o /dev/null "https://cv.sergiomarquez.dev"
          END_TIME=$(date +%s%N)
          DURATION=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "⏱️ Homepage load time: ${DURATION}ms"

          # Check if performance is acceptable
          if [ "$DURATION" -gt 5000 ]; then
            echo "⚠️ Performance degradation detected: ${DURATION}ms"
            echo "PERFORMANCE_ISSUE=true" >> $GITHUB_ENV
          else
            echo "✅ Performance acceptable: ${DURATION}ms"
          fi

      - name: 🔍 SSL certificate check
        if: success()
        run: |
          echo "🔍 Checking SSL certificate..."

          # Check SSL certificate expiry
          CERT_INFO=$(echo | openssl s_client -servername cv.sergiomarquez.dev -connect cv.sergiomarquez.dev:443 2>/dev/null | openssl x509 -noout -dates)
          
          if [ $? -eq 0 ]; then
            echo "✅ SSL certificate is valid"
            echo "$CERT_INFO"
            
            # Extract expiry date and check if it's within 30 days
            EXPIRY_DATE=$(echo "$CERT_INFO" | grep notAfter | cut -d= -f2)
            EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
            CURRENT_TIMESTAMP=$(date +%s)
            DAYS_UNTIL_EXPIRY=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
            
            echo "📅 Certificate expires in $DAYS_UNTIL_EXPIRY days"
            
            if [ "$DAYS_UNTIL_EXPIRY" -lt 30 ]; then
              echo "⚠️ SSL certificate expires soon: $DAYS_UNTIL_EXPIRY days"
              echo "SSL_EXPIRY_WARNING=true" >> $GITHUB_ENV
            fi
          else
            echo "❌ SSL certificate check failed"
            echo "SSL_CHECK_FAILED=true" >> $GITHUB_ENV
          fi

      - name: 🌐 CDN and DNS check
        if: success()
        run: |
          echo "🌐 Checking CDN and DNS..."

          # Check DNS resolution
          if nslookup cv.sergiomarquez.dev > /dev/null 2>&1; then
            echo "✅ DNS resolution successful"
          else
            echo "❌ DNS resolution failed"
            echo "DNS_FAILED=true" >> $GITHUB_ENV
          fi

          # Check Cloudflare headers
          CF_HEADERS=$(curl -s -I "https://cv.sergiomarquez.dev" | grep -i cloudflare)
          if [ -n "$CF_HEADERS" ]; then
            echo "✅ Cloudflare CDN active"
            echo "$CF_HEADERS"
          else
            echo "⚠️ Cloudflare headers not detected"
          fi

      - name: 📱 Mobile responsiveness check
        if: success()
        run: |
          echo "📱 Basic mobile check..."

          # Check viewport meta tag
          VIEWPORT_CHECK=$(curl -s "https://cv.sergiomarquez.dev" | grep -i "viewport")
          if [ -n "$VIEWPORT_CHECK" ]; then
            echo "✅ Viewport meta tag found"
          else
            echo "⚠️ Viewport meta tag missing"
          fi

          # Check for responsive CSS
          RESPONSIVE_CSS=$(curl -s "https://cv.sergiomarquez.dev" | grep -i "media.*screen")
          if [ -n "$RESPONSIVE_CSS" ]; then
            echo "✅ Responsive CSS detected"
          else
            echo "⚠️ Responsive CSS not detected"
          fi

      - name: 🚨 Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Site Health Check Failed';
            const body = `
            ## 🚨 Site Health Monitoring Alert

            **Timestamp:** ${new Date().toISOString()}
            **Check Type:** Scheduled Health Monitor
            **Status:** ❌ FAILED

            ### 📊 Check Results:
            - **Failed Checks:** ${{ steps.health_check.outputs.failed_checks || 'Unknown' }}
            - **Total Checks:** ${{ steps.health_check.outputs.total_checks || 'Unknown' }}

            ### 🔍 Possible Issues:
            - Site availability problems
            - Performance degradation
            - SSL certificate issues
            - CDN/DNS configuration problems

            ### 🔧 Next Steps:
            1. Check Cloudflare Pages deployment status
            2. Verify domain configuration
            3. Test site manually: https://cv.sergiomarquez.dev
            4. Review recent deployments for breaking changes

            ### 🔗 Useful Links:
            - [Site URL](https://cv.sergiomarquez.dev)
            - [Cloudflare Dashboard](https://dash.cloudflare.com)
            - [GitHub Actions](https://github.com/${{ github.repository }}/actions)

            ---
            *This issue was automatically created by the Health Monitor workflow.*
            `;

            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['health-monitor', 'automated']
            });

            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['health-monitor', 'automated', 'bug', 'priority:high']
              });
              console.log('🚨 Created health monitor issue');
            } else {
              console.log('ℹ️ Health monitor issue already exists');
            }

      - name: 💬 Update existing issue on success
        if: success() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            // Find existing health monitor issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['health-monitor', 'automated']
            });

            // Close existing issues if health check passed
            for (const issue of existingIssues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Health Check Resolved**

                **Timestamp:** ${new Date().toISOString()}
                **Status:** All health checks are now passing

                Closing this issue as the site is healthy again.`
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              console.log(`✅ Closed resolved health issue #${issue.number}`);
            }

      - name: 📊 Health status summary
        if: always()
        run: |
          echo "📊 Health Monitor Summary:"
          echo "🌐 Site: https://cv.sergiomarquez.dev"
          echo "⏰ Check time: $(date)"
          echo "✅ Total checks: ${{ steps.health_check.outputs.total_checks || '0' }}"
          echo "❌ Checks failed: ${{ steps.health_check.outputs.failed_checks || '0' }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 Overall status: HEALTHY"
          else
            echo "🚨 Overall status: UNHEALTHY"
          fi
