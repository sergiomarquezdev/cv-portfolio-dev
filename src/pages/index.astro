---
import Layout from "@/layouts/Layout.astro";
import About from "@/components/sections/About.astro";
import Education from "@/components/sections/Education.astro";
import Experience from "@/components/sections/Experience.astro";
import Hero from "@/components/sections/Hero.astro";
import Projects from "@/components/sections/Projects.astro";
import Skills from "@/components/sections/Skills.astro";
import Certificates from "@/components/sections/Certificates.astro";
import Contact from "@/components/sections/Contact.astro";

import { basics } from "@cv";
const { name, label } = basics;

// Si tu componente Hero no incluye un <h1>, podrías definirlo aquí.
// const pageTitle = `${name} - ${label}`
---

<Layout>
  <!-- Indicador de progreso de lectura -->
  <div id="reading-progress-container" class="fixed top-0 left-0 w-full h-0.5 bg-gray-200 dark:bg-gray-800 z-50">
    <div id="reading-progress" class="h-full bg-primary dark:bg-primary-light w-0 transition-all duration-100"></div>
  </div>

  <!-- Hero con la presentación principal -->
  <Hero />

  <main class="bg-gray-50 dark:bg-dark pb-16">
    <!-- Sección Sobre Mí -->
    <section id="sobre-mi" aria-labelledby="sobre-mi">
      <About />
    </section>

    <!-- Experiencia laboral - Mantiene posición prioritaria -->
    <section id="experiencia" aria-labelledby="experiencia-laboral">
      <Experience />
    </section>

    <!-- Proyectos - Movido más arriba para destacar tu trabajo práctico -->
    <section id="proyectos" aria-labelledby="proyectos">
      <Projects />
    </section>

    <!-- Habilidades - Movido más arriba para complementar proyectos y experiencia -->
    <section id="habilidades" aria-labelledby="habilidades">
      <Skills />
    </section>

    <!-- Certificados -->
    <section id="certificados" aria-labelledby="certificados">
      <Certificates />
    </section>

    <!-- Educación - Movida más abajo ya que la experiencia práctica suele ser más relevante -->
    <section id="educacion" aria-labelledby="educacion">
      <Education />
    </section>

    <!-- Contacto - Se mantiene al final como llamada a la acción -->
    <section id="contacto" aria-labelledby="contacto">
      <Contact />
    </section>
  </main>

  <footer class="bg-gray-100 dark:bg-dark-card pt-8 pb-2 text-center text-gray-600 dark:text-gray-400 text-sm">
    <div class="max-w-4xl mx-auto px-6">
      <p>&copy; {new Date().getFullYear()} {name}</p>
    </div>
  </footer>
</Layout>

<script>
  // Script para resaltar la sección activa en la navegación
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('header nav a');

    function highlightActiveSection() {
      let scrollPosition = window.scrollY;

      // Añadir un offset para considerar la altura del header
      const headerHeight = document.querySelector('header')?.getBoundingClientRect().height || 0;
      scrollPosition += headerHeight + 50; // Añadir margen adicional

      // Encontrar la sección actual
      sections.forEach(section => {
        const rect = section.getBoundingClientRect();
        const sectionTop = rect.top + window.scrollY;
        const sectionHeight = rect.height;
        const sectionId = section.getAttribute('id');

        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          // Quitar clase activa de todos los enlaces
          navLinks.forEach(link => {
            link.classList.remove('text-primary', 'text-primary-light', 'font-semibold');
          });

          // Añadir clase activa al enlace correspondiente
          const activeLink = document.querySelector(`header nav a[href="#${sectionId}"]`);
          if (activeLink) {
            // Verificar si estamos en modo oscuro
            const isDarkMode = document.documentElement.classList.contains('dark');
            activeLink.classList.add(isDarkMode ? 'text-primary-light' : 'text-primary', 'font-semibold');
          }
        }
      });
    }

    // Ejecutar al cargar la página
    highlightActiveSection();

    // Ejecutar al hacer scroll
    window.addEventListener('scroll', highlightActiveSection);

    // Actualizar el resaltado de la navegación cuando cambia el tema
    document.getElementById('theme-toggle')?.addEventListener('click', () => {
      // Esperar un momento para que se aplique el cambio de tema
      setTimeout(highlightActiveSection, 100);
    });

    // Actualizar la barra de progreso de lectura
    const progressBar = document.getElementById('reading-progress');
    if (progressBar) {
      function updateProgressBar() {
        const scrollPosition = window.scrollY;
        const totalHeight = document.body.scrollHeight - window.innerHeight;
        const progress = (scrollPosition / totalHeight) * 100;
        if (progressBar instanceof HTMLElement) {
          progressBar.style.width = `${progress}%`;
        }
      }

      // Actualizar en scroll y resize
      window.addEventListener('scroll', updateProgressBar);
      window.addEventListener('resize', updateProgressBar);

      // Actualizar al cargar la página
      updateProgressBar();
    }
  });
</script>
