---
// FooterControls.astro - Barra de navegación flotante con controles principales
---

<div class="fixed md:bottom-2 md:left-0 bottom-4 left-0 right-0 md:right-auto flex items-center justify-center md:justify-start z-40 pointer-events-none">
  <div id="footer-controls" class="transition-all duration-300 transform opacity-100 translate-y-0 md:translate-x-0 pointer-events-auto">
    <div class="flex md:flex-col flex-row items-center md:gap-3 gap-4 md:py-5 md:px-2.5 py-3 px-4 md:ml-3 mx-auto rounded-full backdrop-blur-md bg-white/30 dark:bg-dark-secondary/80 shadow-lg dark:border dark:border-gray-700">
      <!-- Botón para cambiar el tema -->
      <button
        id="theme-toggle"
        class="w-9 h-9 rounded-full bg-primary/10 hover:bg-primary/20 dark:bg-primary/20 dark:hover:bg-primary/30 flex items-center justify-center transition-all duration-200 hover:scale-110 active:scale-95"
        aria-label="Cambiar tema"
        title="Cambiar tema"
      >
        <!-- Icono de sol (visible en modo oscuro) -->
        <svg
          id="theme-toggle-light-icon"
          class="w-5 h-5 hidden dark:block text-amber-500"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
            fill-rule="evenodd"
            clip-rule="evenodd"
          ></path>
        </svg>

        <!-- Icono de luna (visible en modo claro) -->
        <svg
          id="theme-toggle-dark-icon"
          class="w-5 h-5 block dark:hidden text-indigo-600"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
        </svg>
      </button>

      <!-- Separador (horizontal en desktop, vertical en móvil) -->
      <div class="md:w-6 md:h-px h-6 w-px bg-gray-300 dark:bg-gray-700"></div>

      <!-- Botón para activar el modo desarrollador -->
      <button
        id="dev-mode-toggle"
        class="w-9 h-9 rounded-full bg-primary/10 hover:bg-primary/20 dark:bg-indigo-500/20 dark:hover:bg-indigo-500/40 flex items-center justify-center transition-all duration-200 hover:scale-110 active:scale-95"
        aria-label="Activar modo desarrollador"
        title="Activar modo desarrollador"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
        </svg>
      </button>

      <!-- Separador (horizontal en desktop, vertical en móvil) -->
      <div class="md:w-6 md:h-px h-6 w-px bg-gray-300 dark:bg-gray-700"></div>

      <!-- Botón para abrir la terminal -->
      <button
        id="terminal-toggle"
        class="w-9 h-9 rounded-full bg-primary/10 hover:bg-primary/20 dark:bg-indigo-500/20 dark:hover:bg-indigo-500/40 flex items-center justify-center transition-all duration-200 hover:scale-110 active:scale-95"
        aria-label="Abrir terminal"
        title="Abrir terminal"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // Script para manejar la visibilidad de la barra según el scroll
  document.addEventListener('DOMContentLoaded', () => {
    const footerControls = document.getElementById('footer-controls');

    if (!footerControls) return;

    let lastScrollY = window.scrollY;
    const scrollThreshold = 20; // Umbral de scroll para activar la ocultación
    const inactivityDelay = 3000; // Tiempo en ms para ocultar la barra después de inactividad (3 segundos)
    let hideTimeout: number | null = null;
    let userInteracting = false;

    // Determinar si estamos en un dispositivo móvil
    const isMobile = () => window.innerWidth < 768;

    // Función para ocultar la barra (diferente en móvil y desktop)
    const hideControls = () => {
      if (isMobile()) {
        footerControls.classList.remove('opacity-100', 'translate-y-0');
        footerControls.classList.add('opacity-0', 'translate-y-16');
      } else {
        footerControls.classList.remove('opacity-100', 'translate-x-0');
        footerControls.classList.add('opacity-0', '-translate-x-16');
      }
    };

    // Función para mostrar la barra
    const showControls = () => {
      if (isMobile()) {
        footerControls.classList.remove('opacity-0', 'translate-y-16');
        footerControls.classList.add('opacity-100', 'translate-y-0');
      } else {
        footerControls.classList.remove('opacity-0', '-translate-x-16');
        footerControls.classList.add('opacity-100', 'translate-x-0');
      }

      // Configurar temporizador para ocultar después de inactividad
      resetHideTimer();
    };

    // Función para resetear el temporizador de ocultación
    const resetHideTimer = () => {
      // Limpiar el temporizador existente si hay uno
      if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
      }

      // Configurar nuevo temporizador
      hideTimeout = setTimeout(() => {
        // Ocultar si no hay interacción del usuario, independientemente de la posición del scroll
        if (!userInteracting) {
          hideControls();
        }
      }, inactivityDelay) as unknown as number;
    };

    // Función para actualizar la visibilidad según el scroll
    const updateVisibility = () => {
      const currentScrollY = window.scrollY;

      // Si está en la parte superior, mostrar inicialmente pero permitir que se oculte después
      if (currentScrollY < 100) {
        showControls();
        // No hacemos return aquí para permitir que el timer de inactividad funcione
      }
      else if (Math.abs(currentScrollY - lastScrollY) > scrollThreshold) {
        // Si hay un cambio significativo en el scroll
        if (currentScrollY > lastScrollY) {
          // Scrolling hacia abajo - ocultar
          hideControls();
        } else {
          // Scrolling hacia arriba - mostrar
          showControls();
        }
        lastScrollY = currentScrollY;
      }
    };

    // Listener para el evento scroll con debounce para mejor rendimiento
    let scrollTimer: number | null = null;
    window.addEventListener('scroll', () => {
      if (scrollTimer) {
        clearTimeout(scrollTimer);
      }

      scrollTimer = setTimeout(() => {
        updateVisibility();
        resetHideTimer(); // Resetear el temporizador cuando hay scroll
      }, 10) as unknown as number;
    });

    // Detectar cuando el usuario interactúa con los controles
    footerControls.addEventListener('mouseenter', () => {
      userInteracting = true;
      showControls();
    });

    footerControls.addEventListener('mouseleave', () => {
      userInteracting = false;
      resetHideTimer();
    });

    // Detectar toques en dispositivos móviles
    footerControls.addEventListener('touchstart', () => {
      userInteracting = true;
      showControls();
    });

    footerControls.addEventListener('touchend', () => {
      userInteracting = false;
      resetHideTimer();
    });

    // También mostrar cuando el mouse se mueve por la parte izquierda de la pantalla (solo en desktop)
    document.addEventListener('mousemove', (e) => {
      if (!isMobile()) {
        const leftThreshold = 50;
        const verticalThreshold = window.innerHeight / 2;

        if (e.clientX < leftThreshold && e.clientY > verticalThreshold) {
          showControls();
        }
      } else {
        // En móvil, mostrar cuando el mouse se mueve por la parte inferior
        const bottomThreshold = window.innerHeight - 50;

        if (e.clientY > bottomThreshold) {
          showControls();
        }
      }
    });

    // También responder a eventos touch en la parte apropiada en móviles
    document.addEventListener('touchmove', (e) => {
      if (e.touches && e.touches[0]) {
        const touch = e.touches[0];

        if (isMobile()) {
          // En móvil, detectar toques en la parte inferior
          const bottomThreshold = window.innerHeight - 50;

          if (touch.clientY > bottomThreshold) {
            showControls();
          }
        } else {
          // En desktop, mantener el comportamiento original
          const leftThreshold = 30;
          const verticalThreshold = window.innerHeight / 3;

          if (touch.clientX < leftThreshold && touch.clientY > verticalThreshold) {
            showControls();
          }
        }
      }
    });

    // Función para manejar cambios de tamaño de pantalla
    const handleResize = () => {
      // Mostrar siempre al redimensionar para evitar problemas de visibilidad
      showControls();
    };

    // Agregar listener para redimensionamiento
    window.addEventListener('resize', handleResize);

    // Inicializar
    updateVisibility();
    resetHideTimer();
  });
</script>

<style>
  /* Estilos adicionales para efectos visuales */
  .dark #footer-controls > div {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  #footer-controls > div {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    max-width: fit-content;
  }

  /* Optimización de rendimiento para animaciones */
  #footer-controls, button {
    transform: translateZ(0);
    will-change: transform, opacity;
  }

  /* Estado activo para el botón de modo desarrollador */
  #dev-mode-toggle.active-dev-mode {
    background-color: rgba(245, 158, 11, 0.3);
  }

  /* Modo oscuro para el botón activo */
  .dark #dev-mode-toggle.active-dev-mode {
    background-color: rgba(245, 158, 11, 0.5);
  }

  /* Ajustes para dispositivos móviles */
  @media (max-width: 767px) {
    #footer-controls > div {
      padding-left: 16px;
      padding-right: 16px;
      padding-top: 10px;
      padding-bottom: 10px;
      gap: 16px;
    }

    #footer-controls button {
      width: 38px;
      height: 38px;
    }

    #footer-controls svg {
      width: 20px;
      height: 20px;
    }
  }
</style>
