---
import { basics } from "@cv";
import Section from "../Section.astro";
import {
  Mail as Mail,
  X as X,
  LinkedIn as LinkedIn,
  GitHub as GitHub,
  YouTube as YouTube,
  Website as Website,
  type SocialIcon,
} from "@/icons";

const { name, location, profiles, email, image, imageAlt, summaryIntro } = basics;
const { city, region } = location;

const SOCIAL_ICONS: SocialIcon = {
  Website,
  YouTube,
  GitHub,
  LinkedIn,
  X,
};

const PRIORITY = ["YouTube", "GitHub", "LinkedIn", "X"];
const sortedProfiles = [...profiles].sort(
  (a, b) => PRIORITY.indexOf(a.network) - PRIORITY.indexOf(b.network)
);

const typingTexts = [
  "Desarrollador IA/ML",
  "Python & FastAPI",
  "Automatizaci√≥n con n8n",
  "Google Cloud",
  "Java & Spring",
];

// Class constants for reuse
const socialLinkClasses =
  "flex items-center justify-center w-12 h-12 rounded-full border-2 border-border bg-background/50 text-text-muted transition-all duration-300 hover:border-primary hover:bg-primary hover:text-white hover:scale-110 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background";

const btnPrimaryClasses =
  "group inline-flex items-center gap-2 px-8 py-3 bg-accent-cta text-text dark:text-text font-semibold rounded-lg transition-all duration-300 hover:bg-accent-cta/80 hover:scale-105 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-accent-cta focus:ring-offset-2 focus:ring-offset-background";

const btnSecondaryClasses =
  "inline-flex items-center gap-2 px-6 py-3 border-2 border-primary text-primary font-medium rounded-lg transition-all duration-300 hover:bg-primary hover:text-white hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background";
---

<Section title="Hero" id="hero" class="pt-32 pb-10 text-center">
  <div class="relative">
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary-blue/5 dark:from-primary/10 dark:to-secondary-blue/10 rounded-2xl"
    >
    </div>

    <div class="relative z-10 flex flex-col items-center gap-8 text-center py-8 lg:py-12">
      <img
        class="aspect-square h-32 w-32 rounded-full object-cover ring-4 ring-primary/20 shadow-xl transition-transform duration-300 hover:scale-105 hover:ring-primary/40"
        src={image}
        alt={imageAlt}
        width="128"
        height="128"
        loading="eager"
        decoding="async"
      />

      <div class="space-y-4">
        <h1 class="text-h1 font-bold text-text animate-fade-in-up text-gradient-primary">
          {name}
        </h1>

        <div class="h-8 flex items-center justify-center">
          <h2
            id="typing-text"
            class="text-h3 font-medium text-primary typing-cursor"
            data-texts={JSON.stringify(typingTexts)}
          >
          </h2>
        </div>

        <p class="flex items-center justify-center gap-2 text-body-reg text-text-muted">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
              clip-rule="evenodd"></path>
          </svg>
          {city}, {region}
        </p>
      </div>

      <p class="max-w-2xl text-body-lg text-text leading-relaxed animate-fade-in-up delay-200">
        {summaryIntro}
      </p>

      <nav
        class="flex flex-wrap items-center justify-center gap-4 animate-fade-in-up delay-300"
        aria-label="Redes sociales"
      >
        {
          basics.url && (
            <a
              href={basics.url}
              target="_blank"
              rel="noopener noreferrer"
              class:list={[socialLinkClasses]}
              aria-label={`Sitio web personal de ${name}`}
              title="Visitar sitio web personal"
            >
              <Website class="h-6 w-6" />
            </a>
          )
        }

        {
          sortedProfiles.map(({ network, url, username }) => {
            const Icon = SOCIAL_ICONS[network];
            if (!Icon) return null;
            return (
              <a
                href={url}
                target="_blank"
                rel="noopener noreferrer"
                class:list={[socialLinkClasses]}
                aria-label={`Perfil de ${network}: ${username}`}
                title={`Ver perfil en ${network}`}
              >
                <Icon class="h-6 w-6" />
              </a>
            );
          })
        }

        <a
          href={`mailto:${email}`}
          class:list={[socialLinkClasses]}
          aria-label={`Enviar email a ${email}`}
          title={`Enviar email a ${email}`}
        >
          <Mail class="h-6 w-6" />
        </a>
      </nav>

      <div class="flex flex-col sm:flex-row gap-4 items-center animate-fade-in-up delay-500">
        <a href="#contacto" class:list={[btnPrimaryClasses]}>
          <span>Trabajemos juntos</span>
          <svg
            class="w-4 h-4 transition-transform group-hover:translate-x-1"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
        </a>

        <a href="#proyectos" class:list={[btnSecondaryClasses]}> Ver proyectos </a>
      </div>
    </div>
  </div>
</Section>

<style>
  .typing-cursor::after {
    content: "|";
    animation: blink 1s infinite;
    color: theme("colors.primary.DEFAULT");
    font-weight: 300;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .typing-cursor::after {
      animation: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const typingElement = document.getElementById("typing-text");
    if (!typingElement) return;

    const textsData = typingElement.dataset.texts;
    if (!textsData) return;

    const texts = JSON.parse(textsData);
    let textIndex = 0;
    let charIndex = 0;
    let isDeleting = false;

    const type = () => {
      const currentText = texts[textIndex];
      let typeSpeed = isDeleting ? 50 : 100;

      if (isDeleting) {
        charIndex--;
      } else {
        charIndex++;
      }

      typingElement.textContent = currentText.substring(0, charIndex);

      if (!isDeleting && charIndex === currentText.length) {
        // Pause at end of word
        typeSpeed = 2000;
        isDeleting = true;
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        textIndex = (textIndex + 1) % texts.length;
        // Pause before typing new word
        typeSpeed = 500;
      }

      setTimeout(type, typeSpeed);
    };

    // Start typing after a short delay
    setTimeout(type, 1000);
  });
</script>
