---
import { basics, work } from "@cv";
import Section from "../Section.astro";
import {
  MailIcon as Mail,
  XIcon as X,
  LinkedInIcon as LinkedIn,
  GitHubIcon as GitHub,
  YouTubeIcon as YouTube,
  WorldMapIcon as Website,
  type SocialIcon,
} from "@/icons";

const { name, label, location, profiles, email, image, imageAlt, summaryIntro } = basics;
const { city, region } = location;

const currentWork = work && work.length > 0 ? work[0] : null;

const SOCIAL_ICONS: SocialIcon = {
  Website,
  YouTube,
  GitHub,
  LinkedIn,
  X,
};

const PRIORITY = ["YouTube", "GitHub", "LinkedIn", "X"];
const sortedProfiles = [...profiles].sort(
  (a, b) => PRIORITY.indexOf(a.network) - PRIORITY.indexOf(b.network)
);

const typingTexts = [
  label,
  currentWork ? `${currentWork.position}` : "Desarrollador IA/ML",
  "Especialista en Python & FastAPI",
  "Automatizaci√≥n con n8n & LLMOps",
  "Google Cloud & Bases de Datos Vectoriales",
];
---

<Section class="pt-32 pb-20 text-center">
  <div class="relative">
    <div
      class="absolute inset-0 bg-gradient-to-br from-azul-principal/5 via-transparent to-cian-acento/5 rounded-2xl"
    >
    </div>

    <div class="relative z-10 flex flex-col items-center gap-8 text-center py-8 lg:py-12">
      <img
        class="aspect-square h-32 w-32 rounded-full object-cover ring-4 ring-azul-principal/20 shadow-xl transition-transform duration-300 hover:scale-105 hover:ring-azul-principal/40"
        src={image}
        alt={imageAlt}
        loading="eager"
        decoding="async"
      />

      <div class="space-y-4">
        <h1 class="text-h1 font-bold text-texto-principal animate-fade-in">
          {name}
        </h1>

        <div class="h-8 flex items-center justify-center">
          <h2
            id="typing-text"
            class="text-h3 font-medium text-azul-principal typing-cursor"
            data-texts={JSON.stringify(typingTexts)}
          >
          </h2>
        </div>

        <p class="flex items-center justify-center gap-2 text-body-reg text-texto-sutil">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
              clip-rule="evenodd"></path>
          </svg>
          {city}, {region}
        </p>
      </div>

      <p class="max-w-2xl text-body-lg text-texto-secundario leading-relaxed animate-fade-up">
        {summaryIntro}
      </p>

      <nav class="flex flex-wrap items-center justify-center gap-4" aria-label="Redes sociales">
        {
          basics.url && (
            <a
              href={basics.url}
              target="_blank"
              rel="noopener noreferrer"
              class="social-link"
              aria-label={`Sitio web personal de ${name}`}
              title="Visitar sitio web personal"
            >
              <Website class="h-6 w-6" />
            </a>
          )
        }

        {
          sortedProfiles.map(({ network, url, username }) => {
            const Icon = SOCIAL_ICONS[network];
            if (!Icon) return null;
            return (
              <a
                href={url}
                target="_blank"
                rel="noopener noreferrer"
                class="social-link"
                aria-label={`Perfil de ${network}: ${username}`}
                title={`Ver perfil en ${network}`}
              >
                <Icon class="h-6 w-6" />
              </a>
            );
          })
        }

        <a
          href={`mailto:${email}`}
          class="social-link"
          aria-label={`Enviar email a ${email}`}
          title={`Enviar email a ${email}`}
        >
          <Mail class="h-6 w-6" />
        </a>
      </nav>

      <div class="flex flex-col sm:flex-row gap-4 items-center">
        <a
          href="#contacto"
          class="group inline-flex items-center gap-2 px-8 py-3 bg-azul-principal text-fondo-principal font-semibold rounded-lg transition-all duration-300 hover:bg-azul-hover hover:text-white hover:scale-105 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-azul-principal focus:ring-offset-2 focus:ring-offset-fondo-principal"
        >
          <span>Trabajemos juntos</span>
          <svg
            class="w-4 h-4 transition-transform group-hover:translate-x-1"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
        </a>

        <a
          href="#proyectos"
          class="inline-flex items-center gap-2 px-6 py-3 border-2 border-azul-principal text-azul-principal font-medium rounded-lg transition-all duration-300 hover:bg-azul-principal hover:text-white hover:scale-105 focus:outline-none focus:ring-2 focus:ring-azul-principal focus:ring-offset-2 focus:ring-offset-fondo-principal"
        >
          Ver proyectos
        </a>
      </div>
    </div>
  </div>
</Section>

<style>
  a {
    transform: translateZ(0);
    will-change: transform, background-color;
  }

  @media (prefers-reduced-motion: reduce) {
    a {
      transition: none;
    }

    a:hover {
      transform: none;
    }
  }

  .typing-cursor::after {
    content: "|";
    animation: blink 1s infinite;
    color: var(--color-cian-acento, #67e8f9);
    font-weight: 300;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.8s ease-out;
  }

  .animate-fade-up {
    animation: fadeUp 1s ease-out 0.3s both;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .social-link {
    @apply flex items-center justify-center w-12 h-12 rounded-full border-2 border-borde-principal bg-fondo-secundario text-texto-secundario transition-all duration-300;
    @apply hover:border-azul-principal hover:bg-azul-principal hover:text-white hover:scale-110 hover:shadow-lg;
    @apply focus:outline-none focus:ring-2 focus:ring-azul-principal focus:ring-offset-2 focus:ring-offset-fondo-principal;
  }

  @media (prefers-reduced-motion: reduce) {
    .typing-cursor::after {
      animation: none;
    }

    .animate-fade-in,
    .animate-fade-up {
      animation: none;
      opacity: 1;
      transform: none;
    }

    .social-link:hover {
      transform: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const typingElement = document.getElementById("typing-text") as HTMLElement;
    if (!typingElement) return;

    const textsData = typingElement.getAttribute("data-texts");
    if (!textsData) return;

    const texts = JSON.parse(textsData);
    let currentTextIndex = 0;
    let currentCharIndex = 0;
    let isDeleting = false;
    let isPaused = false;

    function typeEffect() {
      const currentText = texts[currentTextIndex];

      if (isPaused) {
        setTimeout(() => {
          isPaused = false;
          isDeleting = true;
          typeEffect();
        }, 2000);
        return;
      }

      if (isDeleting) {
        currentCharIndex--;
        typingElement.textContent = currentText.substring(0, currentCharIndex);

        if (currentCharIndex === 0) {
          isDeleting = false;
          currentTextIndex = (currentTextIndex + 1) % texts.length;
          setTimeout(typeEffect, 500);
        } else {
          setTimeout(typeEffect, 50);
        }
      } else {
        currentCharIndex++;
        typingElement.textContent = currentText.substring(0, currentCharIndex);

        if (currentCharIndex === currentText.length) {
          isPaused = true;
          setTimeout(typeEffect, 100);
        } else {
          setTimeout(typeEffect, 100);
        }
      }
    }

    setTimeout(() => {
      typeEffect();
    }, 1000);
  });
</script>
