---
import Section from "../Section.astro";
const WEB3FORMS_API_KEY = import.meta.env.PUBLIC_WEB3FORMS_API_KEY;

const inputClasses =
  "w-full px-4 py-3 rounded-md border border-border bg-background text-text focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all duration-200 placeholder:text-text-muted";
const submitButtonClasses =
  "px-8 py-3 rounded-md bg-accent-cta text-text font-semibold transition-all duration-200 shadow-button hover:bg-accent-cta/80 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-accent-cta focus:ring-offset-2 focus:ring-offset-background-surface disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100";
---

<Section title="Contacto" id="contacto">
  <article class="bg-background-surface p-l rounded-lg border border-border shadow-lg">
    <form
      action="https://api.web3forms.com/submit"
      method="POST"
      id="form"
      class="needs-validation"
      novalidate
    >
      <input type="hidden" name="access_key" value={WEB3FORMS_API_KEY} />
      <input type="checkbox" name="botcheck" class="hidden" style="display:none" />

      <div class="grid grid-cols-1 md:grid-cols-2 gap-m">
        <div>
          <label for="name" class="block text-text-muted font-medium mb-2">Nombre</label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class:list={[inputClasses]}
            placeholder="Tu nombre completo"
          />
          <div class="feedback empty-feedback">Por favor, proporciona tu nombre.</div>
        </div>
        <div>
          <label for="email" class="block text-text-muted font-medium mb-2"
            >Correo Electrónico</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class:list={[inputClasses]}
            placeholder="tu@email.com"
          />
          <div class="feedback empty-feedback">Por favor, proporciona tu correo.</div>
          <div class="feedback invalid-feedback">Por favor, proporciona un correo válido.</div>
        </div>
      </div>

      <div class="mt-m">
        <label for="message" class="block text-text-muted font-medium mb-2">Mensaje</label>
        <textarea
          id="message"
          name="message"
          minlength="10"
          required
          class:list={[inputClasses, "h-32 resize-y"]}
          placeholder="Escribe tu mensaje aquí..."></textarea>
        <div class="feedback empty-feedback">Por favor, ingresa tu mensaje.</div>
      </div>

      <div class="mt-l">
        <button type="submit" class:list={[submitButtonClasses]}> Enviar mensaje </button>
      </div>
      <div id="result" class="mt-4 text-center" role="status" aria-live="polite"></div>
    </form>
  </article>
</Section>

<style>
  .feedback {
    display: block;
    opacity: 0;
    color: theme("colors.status.warning");
    font-size: theme("fontSize.small");
    margin-top: theme("spacing.xs");
    transition: opacity 0.2s ease;
  }

  .was-validated input:invalid,
  .was-validated textarea:invalid {
    border-color: theme("colors.status.warning");
  }

  .was-validated input:invalid ~ .empty-feedback,
  .was-validated textarea:invalid ~ .empty-feedback {
    opacity: 1;
  }

  .was-validated input:not(:placeholder-shown):invalid ~ .invalid-feedback,
  .was-validated textarea:not(:placeholder-shown):invalid ~ .invalid-feedback {
    opacity: 1;
  }

  .was-validated input:valid,
  .was-validated textarea:valid {
    border-color: theme("colors.status.success");
  }

  #result {
    display: none;
    padding: theme("spacing.s");
    border-radius: theme("borderRadius.md");
    border-width: 1px;
    transition: all 0.3s ease;
  }

  #result.success {
    color: theme("colors.status.success");
    background-color: theme("colors.status.success / 0.1");
    border-color: theme("colors.status.success / 0.2");
  }

  #result.error {
    color: theme("colors.status.warning");
    background-color: theme("colors.status.warning / 0.1");
    border-color: theme("colors.status.warning / 0.2");
  }

  button.loading {
    position: relative;
    color: transparent !important;
  }

  button.loading::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    width: 20px;
    height: 20px;
    border: 2px solid theme("colors.white");
    border-radius: 50%;
    border-top-color: transparent;
    transform: translate(-50%, -50%);
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("form") as HTMLFormElement;
    const result = document.getElementById("result") as HTMLElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;

    if (!form || !result || !submitButton) return;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      form.classList.add("was-validated");

      if (!form.checkValidity()) {
        const invalidElement = form.querySelector(":invalid") as HTMLElement;
        invalidElement?.focus();
        return;
      }

      submitButton.classList.add("loading");
      submitButton.disabled = true;
      result.textContent = "Enviando...";
      result.className = "mt-4 text-center"; // Reset classes
      result.style.display = "block";

      try {
        const formData = new FormData(form);
        const response = await fetch("https://api.web3forms.com/submit", {
          method: "POST",
          body: formData,
        });

        const data = await response.json();

        if (data.success) {
          result.textContent = "¡Mensaje enviado! Te responderé pronto.";
          result.classList.add("success");
          form.reset();
          form.classList.remove("was-validated");
        } else {
          result.textContent = data.message || "Error al enviar el mensaje.";
          result.classList.add("error");
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        result.textContent = "Error de conexión. Inténtalo de nuevo.";
        result.classList.add("error");
      } finally {
        submitButton.classList.remove("loading");
        submitButton.disabled = false;
        setTimeout(() => {
          result.style.display = "none";
        }, 6000);
      }
    });
  });
</script>
