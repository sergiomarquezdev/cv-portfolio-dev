---
/**
 * Contact.astro - Componente de formulario de contacto
 *
 * Características:
 * - Implementa un formulario interactivo conectado a Web3Forms
 * - Incluye validación de campos en tiempo real con feedback visual
 * - Gestiona estados de envío, éxito y error con mensajes apropiados
 * - Proporciona feedback visual durante el proceso de envío
 * - Accesible con etiquetas semánticamente correctas y mensajes de error
 * - Adaptable a diferentes tamaños de pantalla
 * - Estilizado para modos claro y oscuro
 */
import Section from "../Section.astro";
const WEB3FORMS_API_KEY = import.meta.env.PUBLIC_WEB3FORMS_API_KEY;
---

<Section title="Contacto">
  <article class="bg-fondo-secundario p-l rounded-lg border border-borde-principal shadow-lg">
    <form
      action="https://api.web3forms.com/submit"
      method="POST"
      id="form"
      class="needs-validation"
      novalidate
    >
      <input type="hidden" name="access_key" value={WEB3FORMS_API_KEY} />
      <input type="checkbox" name="botcheck" class="hidden" style="display:none" />

      <div class="grid grid-cols-1 md:grid-cols-2 gap-m">
        <div>
          <label for="name" class="block text-texto-secundario font-medium mb-2">Nombre</label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-4 py-2 rounded-md border border-borde-principal bg-fondo-principal text-texto-principal focus:border-azul-principal focus:ring-2 focus:ring-azul-principal/20 outline-none transition-all"
            placeholder="Tu nombre completo"
          />
          <div class="empty-feedback invalid-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona tu nombre.
          </div>
        </div>
        <div>
          <label for="email" class="block text-texto-secundario font-medium mb-2"
            >Correo Electrónico</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-2 rounded-md border border-borde-principal bg-fondo-principal text-texto-principal focus:border-azul-principal focus:ring-2 focus:ring-azul-principal/20 outline-none transition-all"
            placeholder="tu@email.com"
          />
          <div class="empty-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona tu correo.
          </div>
          <div class="invalid-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona un correo válido.
          </div>
        </div>
      </div>

      <div class="mt-m">
        <label for="message" class="block text-texto-secundario font-medium mb-2">Mensaje</label>
        <textarea
          id="message"
          name="message"
          minlength="10"
          required
          class="w-full px-4 py-2 rounded-md border border-borde-principal bg-fondo-principal text-texto-principal focus:border-azul-principal focus:ring-2 focus:ring-azul-principal/20 outline-none transition-all h-32"
          placeholder="Escribe tu mensaje aquí..."></textarea>
        <div class="empty-feedback invalid-feedback text-red-500 text-sm mt-1">
          Por favor, ingresa tu mensaje.
        </div>
      </div>

      <div class="mt-m">
        <button
          type="submit"
          class="px-6 py-3 rounded-md bg-azul-oscuro text-white font-semibold transition-all shadow-button hover:bg-azul-principal hover:scale-105"
        >
          Enviar mensaje
        </button>
      </div>
      <div id="result" class="mt-4 text-center" role="status" aria-live="polite"></div>
    </form>
  </article>
</Section>

<style>
  .empty-feedback,
  .invalid-feedback {
    display: none;
  }
  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }
  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }
  .is-invalid,
  .was-validated :invalid {
    border-color: #ef4444;
  }

  #result {
    display: none;
    font-size: 1rem;
    padding: 1rem;
    border-radius: 0.375rem; /* rounded-md */
    border-width: 1px;
  }
  #result.success {
    color: #4ade80; /* green-400 */
    background-color: rgba(74, 222, 128, 0.1);
    border-color: rgba(74, 222, 128, 0.2);
  }
  #result.error {
    color: #f87171; /* red-400 */
    background-color: rgba(248, 113, 113, 0.1);
    border-color: rgba(248, 113, 113, 0.2);
  }

  button.loading {
    position: relative;
    color: transparent !important;
  }
  button.loading::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    width: 20px;
    height: 20px;
    border: 2px solid #f9fafb; /* texto-principal */
    border-radius: 50%;
    border-top-color: transparent;
    transform: translate(-50%, -50%);
    animation: spin 1s linear infinite;
  }
  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("form") as HTMLFormElement | null;
    const result = document.getElementById("result") as HTMLElement | null;
    const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;

    if (!form || !result || !submitButton) {
      console.warn("No se pudieron encontrar elementos del formulario de contacto.");
      return;
    }

    form.addEventListener("submit", function (e) {
      e.preventDefault();
      form.classList.add("was-validated");

      if (!form.checkValidity()) {
        const invalidElement = form.querySelectorAll(":invalid")[0] as HTMLElement;
        if (invalidElement) invalidElement.focus();
        return;
      }

      const formData = new FormData(form);
      const object = Object.fromEntries(formData);
      const json = JSON.stringify(object);

      // Estado "loading"
      submitButton.classList.add("loading");
      submitButton.setAttribute("aria-label", "Enviando...");
      submitButton.setAttribute("aria-busy", "true");
      result.innerHTML = "Enviando...";
      result.classList.remove("error", "success");
      result.style.display = "block";

      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: json,
      })
        .then(async (response) => {
          const json = await response.json();
          if (response.status == 200) {
            result.classList.add("success");
            result.innerHTML = json.message;
            form.reset();
            form.classList.remove("was-validated");
          } else {
            if (response.status >= 500) {
              console.error("Error del servidor al enviar el formulario:", response.status);
            }
            result.classList.add("error");
            result.innerHTML = json.message;
          }
        })
        .catch((error) => {
          console.error("Error al enviar el formulario:", error);
          result.innerHTML = "Algo salió mal. Por favor, inténtalo de nuevo.";
          result.classList.add("error");
        })
        .finally(() => {
          submitButton.classList.remove("loading");
          submitButton.removeAttribute("aria-label");
          submitButton.setAttribute("aria-busy", "false");
          setTimeout(() => {
            result.style.display = "none";
          }, 5000);
        });
    });
  });
</script>
