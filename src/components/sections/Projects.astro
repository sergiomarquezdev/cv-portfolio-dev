---
import Section from "../Section.astro";
import { projects } from "@cv";
import { GitHubIcon, WebsiteIcon } from "@/icons";

const { title } = Astro.props;

// Class constants for reuse
const cardClasses = "project-card group relative bg-background-surface rounded-xl border border-border overflow-hidden transition-all duration-300 hover:scale-[1.02] hover:-translate-y-1 hover:shadow-2xl hover:shadow-primary/20";

const cardBorderClasses = (isActive: boolean) => isActive ? "border-l-4 border-l-status-success" : "border-l-4 border-l-status-warning";

const techBadgeClasses = "tech-badge px-3 py-1 bg-primary/10 border border-primary/30 text-primary text-sm rounded-md font-medium transition-all duration-300 hover:scale-105 hover:shadow-md hover:bg-primary hover:text-white";

const actionLinkBase = "inline-flex items-center justify-center gap-2 px-4 py-2 font-medium rounded-lg transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-surface";
const visitLinkClasses = `${actionLinkBase} flex-1 min-w-fit bg-status-success text-white hover:bg-status-success/80 focus:ring-status-success`;
const githubLinkClasses = `${actionLinkBase} border-2 border-primary text-primary bg-transparent hover:bg-primary hover:text-white focus:ring-primary`;
const exploreLinkClasses = `${actionLinkBase} border border-primary text-primary hover:bg-primary hover:text-white focus:ring-primary`;
---

<Section title={title || "Proyectos"} id="proyectos">
  <div class="grid grid-cols-1 gap-m sm:grid-cols-2 lg:grid-cols-3">
    {
      projects.map((project: any) => (
        <article
          class:list={[cardClasses, cardBorderClasses(project.isActive)]}
        >
          <div class="p-l space-y-s">
            <header class="space-y-xs">
              <h3 class="text-h3 font-bold text-text group-hover:text-primary transition-colors duration-300 mb-2">
                {project.name}
              </h3>
              <p class="text-body-lg text-text-muted leading-relaxed line-clamp-3">
                {project.description}
              </p>
            </header>

            <div class="tech-stack space-y-2">
              <h4 class="text-sm font-semibold text-text-muted uppercase tracking-wide">
                Stack Tecnológico
              </h4>
              <div class="flex flex-wrap gap-2">
                {project.highlights.map((tech: string) => (
                  <span class:list={[techBadgeClasses]}>
                    {tech}
                  </span>
                ))}
              </div>
            </div>

            <footer class="flex flex-wrap gap-s pt-s border-t border-border">
              {project.url && (
                <a
                  href={project.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class:list={[visitLinkClasses]}
                  aria-label={`Visitar ${project.name}`}
                >
                  <WebsiteIcon class="w-4 h-4" />
                  Visitar
                </a>
              )}

              {Array.isArray(project.github) &&
                project.github.length > 0 &&
                project.github.map((link: string) => (
                  <a
                    href={link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class:list={[githubLinkClasses]}
                    aria-label={`Ver código fuente de ${project.name} (${String(link).split("/").pop()})`}
                  >
                    <GitHubIcon class="w-4 h-4" />
                    {`${String(link).split("/").pop()}`}
                  </a>
                ))}
              {typeof project.github === "string" && (
                <a
                  href={project.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class:list={[githubLinkClasses]}
                  aria-label={`Ver código fuente de ${project.name} (${String(project.github).split("/").pop()})`}
                >
                  <GitHubIcon class="w-4 h-4" />
                  {`Código: ${String(project.github).split("/").pop()}`}
                </a>
              )}
            </footer>
          </div>
        </article>
      ))
    }
  </div>

  <div class="mt-l text-center">
    <p class="text-sm text-text-muted mb-s">¿Interesado en ver más proyectos?</p>
    <a
      href="https://github.com/sergiomarquezdev"
      target="_blank"
      rel="noopener noreferrer"
      class:list={[exploreLinkClasses]}
    >
      <GitHubIcon class="w-4 h-4" />
      Explorar en GitHub
    </a>
  </div>
</Section>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const card = entry.target as HTMLElement;
            card.classList.add('animate-fade-in-up');
            
            const techBadges = card.querySelectorAll('.tech-badge');
            techBadges.forEach((badge, index) => {
              const badgeEl = badge as HTMLElement;
              badgeEl.style.animationDelay = `${index * 100}ms`;
              badgeEl.classList.add('animate-fade-in-up');
            });

            obs.unobserve(card);
          }
        });
      },
      { threshold: 0.1 }
    );

    document.querySelectorAll('.project-card').forEach(card => {
      observer.observe(card);
    });
  });
</script>