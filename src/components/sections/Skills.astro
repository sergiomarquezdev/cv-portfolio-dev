---
import Section from "../Section.astro";
import { highlightedSkills, databasesSkills, otherSkills } from "@cv";
import {
  JavaIcon as Java,
  SpringIcon as Spring,
  DockerIcon as Docker,
  KubernetesIcon as Kubernetes,
  CICDIcon as CICD,
  NodeIcon as Node,
  PythonIcon as Python,
  FastAPIIcon as FastAPI,
  GoIcon as Go,
  PostgreSQLIcon as PostgreSQL,
  MongoDBIcon as MongoDB,
  PineconeIcon as Pinecone,
  AiIcon as Ai,
  LLMOpsIcon as LLMOps,
  N8nIcon as N8n,
  GCPIcon as GCP,
} from "@/icons";

const SKILLS_ICONS = {
  Java,
  Spring,
  Docker,
  Kubernetes,
  CICD,
  Node,
  Python,
  FastAPI,
  Go,
  PostgreSQL,
  MongoDB,
  Pinecone,
  Ai,
  LLMOps,
  N8n,
  GCP,
} as const;
---

<Section title="Habilidades">
  <div class="space-y-l" id="skills-container">
    <div class="skill-category" data-category="highlighted">
      <h3 class="mb-s text-lg font-semibold text-muted-text">Principales tecnologías</h3>
      <ul class="flex flex-wrap gap-2" id="highlighted-skills">
        {
          highlightedSkills.map(({ name, icon }, index) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li
                class="skill-item flex items-center gap-2 rounded-md border border-border-gray bg-dark-surface px-3 py-1 text-base font-semibold text-secondary-text transition-all duration-300 hover:-translate-y-1 hover:shadow-md"
                data-index={index}
              >
                {IconComponent && <IconComponent class="h-5 w-5" />}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>

    <div class="skill-category" data-category="other">
      <h3 class="mb-s text-lg font-semibold text-muted-text">Otras tecnologías</h3>
      <ul class="flex flex-wrap gap-2" id="other-skills">
        {
          otherSkills.map(({ name, icon }, index) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li
                class="skill-item flex items-center gap-2 rounded-md border border-border-gray bg-dark-surface px-3 py-1 text-base text-primary-text transition-all duration-300 hover:-translate-y-1 hover:shadow-md"
                data-index={index}
              >
                {IconComponent && <IconComponent class="h-5 w-5" />}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>

    <div class="skill-category" data-category="databases">
      <h3 class="mb-s text-lg font-semibold text-muted-text">Bases de datos</h3>
      <ul class="flex flex-wrap gap-2" id="database-skills">
        {
          databasesSkills.map(({ name, icon }, index) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li
                class="skill-item flex items-center gap-2 rounded-md border border-border-gray bg-dark-surface px-3 py-1 text-base text-primary-text transition-all duration-300 hover:-translate-y-1 hover:shadow-md"
                data-index={index}
              >
                {IconComponent && <IconComponent class="h-5 w-5" />}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</Section>

<style>
  .skill-item {
    opacity: 0;
    transform: translateY(20px) scale(0.9);
    transition:
      opacity 0.4s ease,
      transform 0.4s ease;
  }

  .skill-item.animate-in {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .skill-category[data-category="highlighted"] .skill-item:nth-child(1) {
    transition-delay: 0ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(2) {
    transition-delay: 50ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(3) {
    transition-delay: 100ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(4) {
    transition-delay: 150ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(5) {
    transition-delay: 200ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(6) {
    transition-delay: 250ms;
  }
  .skill-category[data-category="highlighted"] .skill-item:nth-child(7) {
    transition-delay: 300ms;
  }

  .skill-category[data-category="other"] .skill-item:nth-child(1) {
    transition-delay: 350ms;
  }
  .skill-category[data-category="other"] .skill-item:nth-child(2) {
    transition-delay: 400ms;
  }
  .skill-category[data-category="other"] .skill-item:nth-child(3) {
    transition-delay: 450ms;
  }
  .skill-category[data-category="other"] .skill-item:nth-child(4) {
    transition-delay: 500ms;
  }
  .skill-category[data-category="other"] .skill-item:nth-child(5) {
    transition-delay: 550ms;
  }

  .skill-category[data-category="databases"] .skill-item:nth-child(1) {
    transition-delay: 600ms;
  }
  .skill-category[data-category="databases"] .skill-item:nth-child(2) {
    transition-delay: 650ms;
  }
  .skill-category[data-category="databases"] .skill-item:nth-child(3) {
    transition-delay: 700ms;
  }
  .skill-category[data-category="databases"] .skill-item:nth-child(4) {
    transition-delay: 750ms;
  }

  .skill-item:hover {
    background-color: rgba(59, 130, 246, 0.1);
    border-color: rgba(59, 130, 246, 0.4);
    transform: translateY(-4px) scale(1.05);
  }

  @media (prefers-reduced-motion: reduce) {
    .skill-item {
      opacity: 1;
      transform: none;
      transition: none;
    }

    .skill-item:hover {
      transform: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    if ("IntersectionObserver" in window) {
      const skillsObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const skillItems = entry.target.querySelectorAll(".skill-item");

              skillItems.forEach((item, index) => {
                setTimeout(() => {
                  item.classList.add("animate-in");
                }, index * 50);
              });

              skillsObserver.unobserve(entry.target);
            }
          });
        },
        {
          rootMargin: "0px 0px -50px 0px",
          threshold: 0.2,
        }
      );

      const skillsContainer = document.getElementById("skills-container");
      if (skillsContainer) {
        skillsObserver.observe(skillsContainer);
      }
    } else {
      const skillItems = document.querySelectorAll(".skill-item");
      skillItems.forEach((item) => {
        item.classList.add("animate-in");
      });
    }
  });
</script>
