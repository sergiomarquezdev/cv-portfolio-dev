---
/**
 * MatrixEffect.astro - Efecto visual estilo "Matrix" para el modo desarrollador
 *
 * Características:
 * - Genera un efecto de "lluvia de código" similar al de la película Matrix
 * - Se activa/desactiva mediante comandos en la terminal o botón dedicado
 * - Incluye modo avanzado con colores especiales (desbloqueable)
 * - Optimizado para rendimiento con requestAnimationFrame
 * - Adaptable a diferentes tamaños de pantalla
 * - Funciona como capa visual sin interferir con la interacción del usuario
 * - Se integra con otros componentes a través de eventos personalizados y la API window (para compatibilidad)
 *
 * @author Sergio Márquez DEV
 * @version 2.0.0
 * @license MIT
 */
---

<canvas
  id="matrix-canvas"
  class="hidden fixed top-0 left-0 w-full h-full pointer-events-none z-10 opacity-0 transition-opacity duration-1000 ease-in-out"
  aria-hidden="true"
></canvas>

<script>
  /**
   * Tipos para el efecto Matrix
   */
  interface MatrixColumn {
    yPos: number;      // Posición vertical de la columna
    speed: number;     // Velocidad de caída
    brightness: number; // Brillo del contenido (0-1)
    snippet: string;   // Fragmento de código actual
  }

  interface MatrixConfig {
    fontSize: number;
    framesPerSecond: number;
    snippets: string[];
    normalMode: {
      colors: {
        bright: string;
        normal: string;
      }
    };
    advancedMode: {
      enabled: boolean;
      hueRange: {
        min: number;
        max: number;
      }
    }
  }

  interface MatrixState {
    isActive: boolean;
    isAdvancedMode: boolean;
    columns: MatrixColumn[];
    intervalId: number | null;
  }

  // Eventos personalizados
  const EVENTS = {
    TOGGLE: 'matrix:toggle',
    TOGGLE_ADVANCED: 'matrix:toggle-advanced',
    ACTIVATED: 'matrix:activated',
    DEACTIVATED: 'matrix:deactivated'
  };

  // Estado del efecto Matrix
  const state: MatrixState = {
    isActive: false,
    isAdvancedMode: false,
    columns: [],
    intervalId: null
  };

  // Configuración del efecto Matrix
  const config: MatrixConfig = {
    fontSize: 14,
    framesPerSecond: 30,
    snippets: [
      // JavaScript
      'function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'switch', 'case',
      'class', 'extends', 'super', 'new', 'this', 'async', 'await', 'try', 'catch', 'finally',
      'import', 'export', 'from', 'default', 'null', 'undefined', 'true', 'false', 'NaN',
      // HTML
      '<div>', '</div>', '<span>', '</span>', '<p>', '</p>', '<h1>', '</h1>', '<a>', '</a>',
      '<button>', '</button>', '<input>', '<form>', '</form>', '<img>', '<section>', '</section>',
      // CSS
      'display: flex;', 'color: #fff;', 'margin: 0;', 'padding: 10px;', 'border-radius: 4px;',
      'background-color:', 'font-size:', 'font-weight:', 'transition:', 'transform:',
      // TypeScript
      'interface', 'type', 'enum', 'namespace', 'readonly', 'as', 'is', 'keyof', 'typeof',
      // React
      'useState', 'useEffect', 'useContext', 'useRef', 'useMemo', 'useCallback', '<React.Fragment>',
      // Angular
      'ngOnInit', '@Component', '@Input', '@Output', '*ngFor', '*ngIf', 'EventEmitter',
      // Astro
      'Astro.props', 'client:load', 'client:visible', 'is:inline', '<slot />', 'getStaticPaths',
      // Comentarios y operadores
      '//', '/*', '*/', '===', '!==', '>=', '<=', '=>', '...', '&&', '||', '??', '?.'
    ],
    normalMode: {
      colors: {
        bright: 'rgba(180, 255, 180, {alpha})',
        normal: 'rgba(0, {green}, 0, {alpha})'
      }
    },
    advancedMode: {
      enabled: false,
      hueRange: {
        min: 120,
        max: 180
      }
    }
  };

  /**
   * Obtiene el elemento canvas del DOM
   * @returns {HTMLCanvasElement|null} El elemento canvas o null si no existe
   */
  function getCanvas(): HTMLCanvasElement | null {
    return document.getElementById('matrix-canvas') as HTMLCanvasElement;
  }

  /**
   * Obtiene el contexto de renderizado 2D del canvas
   * @param {HTMLCanvasElement} canvas - El elemento canvas
   * @returns {CanvasRenderingContext2D|null} El contexto 2D o null si no se puede obtener
   */
  function getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D | null {
    return canvas.getContext('2d');
  }

  /**
   * Redimensiona el canvas para que ocupe toda la pantalla
   * @param {HTMLCanvasElement} canvas - El elemento canvas a redimensionar
   */
  function resizeCanvas(canvas: HTMLCanvasElement): void {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  /**
   * Muestra el canvas con una animación suave
   * @param {HTMLCanvasElement} canvas - El elemento canvas a mostrar
   */
  function showCanvas(canvas: HTMLCanvasElement): void {
    canvas.classList.remove('hidden');
    setTimeout(() => {
      canvas.classList.add('opacity-70');
    }, 100);
  }

  /**
   * Oculta el canvas con una animación suave
   * @param {HTMLCanvasElement} canvas - El elemento canvas a ocultar
   * @param {Function} callback - Función a ejecutar cuando termine la animación
   */
  function hideCanvas(canvas: HTMLCanvasElement, callback?: () => void): void {
    canvas.classList.remove('opacity-70');
    setTimeout(() => {
      canvas.classList.add('hidden');
      if (callback) callback();
    }, 1000);
  }

  /**
   * Inicializa las columnas de la matriz
   * @param {number} width - Ancho del canvas
   * @returns {MatrixColumn[]} Array de columnas inicializadas
   */
  function initializeColumns(width: number): MatrixColumn[] {
    const columns: MatrixColumn[] = [];
    const columnCount = Math.floor(width / config.fontSize);

    for (let i = 0; i < columnCount; i++) {
      columns.push({
        yPos: Math.random() * -100,
        speed: Math.random() * 0.5 + 0.5,
        brightness: Math.random() * 0.5 + 0.5,
        snippet: getRandomSnippet()
      });
    }

    return columns;
  }

  /**
   * Obtiene un fragmento de código aleatorio de la lista de snippets
   * @returns {string} Fragmento de código aleatorio
   */
  function getRandomSnippet(): string {
    return config.snippets[Math.floor(Math.random() * config.snippets.length)];
  }

  /**
   * Actualiza una columna de la matriz
   * @param {MatrixColumn} column - Columna a actualizar
   * @param {number} canvasHeight - Altura del canvas
   * @returns {MatrixColumn} Columna actualizada
   */
  function updateColumn(column: MatrixColumn, canvasHeight: number): MatrixColumn {
    // Mover la columna hacia abajo según su velocidad
    column.yPos += column.speed;

    // Cambiar aleatoriamente el fragmento (efecto de cambio de código)
    if (Math.random() > 0.99) {
      column.snippet = getRandomSnippet();
    }

    // Reiniciar la columna cuando llegue al final o aleatoriamente
    if (column.yPos * config.fontSize > canvasHeight && Math.random() > 0.975) {
      column.yPos = 0;
      column.speed = Math.random() * 0.5 + 0.5;
      column.brightness = Math.random() * 0.5 + 0.5;
      column.snippet = getRandomSnippet();
    }

    return column;
  }

  /**
   * Calcula el color para una columna según su posición y modo
   * @param {MatrixColumn} column - Columna para la que calcular el color
   * @param {number} columnIndex - Índice de la columna
   * @param {boolean} isAdvancedMode - Si está activo el modo avanzado
   * @returns {string} Color CSS para la columna
   */
  function getColumnColor(column: MatrixColumn, columnIndex: number, isAdvancedMode: boolean): string {
    const alpha = column.brightness * 0.7; // Reducimos la opacidad para que sea más sutil
    const isTopPart = column.yPos * config.fontSize < 50;

    if (isAdvancedMode) {
      // En modo avanzado, usamos colores más variados
      const hue = (columnIndex % 60) + config.advancedMode.hueRange.min;
      if (isTopPart) {
        // Fragmentos en la parte superior son más brillantes
        return `hsla(${hue}, 100%, 80%, ${alpha * 1.2})`;
      } else {
        // El resto de fragmentos con el color variable
        return `hsla(${hue}, 100%, 50%, ${alpha})`;
      }
    } else {
      // Modo normal con colores verdes
      if (isTopPart) {
        // Fragmentos en la parte superior son más brillantes
        return config.normalMode.colors.bright.replace('{alpha}', String(alpha));
      } else {
        // El resto de fragmentos son verde código
        const green = Math.floor(column.brightness * 255);
        return config.normalMode.colors.normal
          .replace('{green}', String(green))
          .replace('{alpha}', String(alpha));
      }
    }
  }

  /**
   * Dibuja una columna en el canvas
   * @param {CanvasRenderingContext2D} ctx - Contexto de renderizado
   * @param {MatrixColumn} column - Columna a dibujar
   * @param {number} index - Índice de la columna
   * @param {boolean} isAdvancedMode - Si está activo el modo avanzado
   * @param {number} canvasWidth - Ancho del canvas
   */
  function drawColumn(
    ctx: CanvasRenderingContext2D,
    column: MatrixColumn,
    index: number,
    isAdvancedMode: boolean,
    canvasWidth: number
  ): void {
    // Establecer el color de relleno
    ctx.fillStyle = getColumnColor(column, index, isAdvancedMode);

    // Establecer la fuente
    ctx.font = `${config.fontSize}px "Fira Code", monospace`;

    // Dibujar el fragmento de código ajustando la posición X para que no se corten
    const xPos = index * config.fontSize * 1.5 % canvasWidth;
    ctx.fillText(column.snippet, xPos, column.yPos * config.fontSize);
  }

  /**
   * Renderiza un frame del efecto Matrix
   * @param {CanvasRenderingContext2D} ctx - Contexto de renderizado
   * @param {HTMLCanvasElement} canvas - Elemento canvas
   * @param {MatrixState} state - Estado actual del efecto
   */
  function renderFrame(
    ctx: CanvasRenderingContext2D,
    canvas: HTMLCanvasElement,
    state: MatrixState
  ): void {
    // Limpiar el canvas completamente antes de dibujar el nuevo frame
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Actualizar y dibujar cada columna
    for (let i = 0; i < state.columns.length; i++) {
      // Actualizar la posición y contenido de la columna
      state.columns[i] = updateColumn(state.columns[i], canvas.height);

      // Dibujar la columna
      drawColumn(ctx, state.columns[i], i, state.isAdvancedMode, canvas.width);
    }
  }

  /**
   * Inicia el efecto Matrix
   * @returns {boolean} true si se inició correctamente, false si ya estaba activo
   */
  function initCodeEffect(): boolean {
    // Si ya está activo, no hacer nada
    if (state.isActive) return false;

    // Obtener el canvas
    const canvas = getCanvas();
    if (!canvas) return false;

    // Obtener el contexto 2D
    const ctx = getContext(canvas);
    if (!ctx) return false;

    // Marcar como activo
    state.isActive = true;

    // Limpiar el intervalo anterior si existe
    if (state.intervalId) {
      clearInterval(state.intervalId);
      state.intervalId = null;
    }

    // Comprobar si el modo avanzado está activo
    state.isAdvancedMode = canvas.classList.contains('matrix-advanced');

    // Mostrar el canvas con una animación suave
    showCanvas(canvas);

    // Ajustar el tamaño del canvas al tamaño de la ventana
    resizeCanvas(canvas);

    // Escuchar eventos de redimensión
    window.addEventListener('resize', () => resizeCanvas(canvas));

    // Inicializar las columnas
    state.columns = initializeColumns(canvas.width);

    // Crear la función de renderizado
    const draw = () => renderFrame(ctx, canvas, state);

    // Calcular el intervalo según los FPS configurados
    const interval = 1000 / config.framesPerSecond;

    // Ejecutar la función draw según el intervalo configurado
    state.intervalId = setInterval(draw, interval) as unknown as number;

    // Disparar evento de activación
    dispatchEvent(EVENTS.ACTIVATED);

    return true;
  }

  /**
   * Detiene el efecto Matrix
   * @returns {boolean} true si se detuvo correctamente, false si ya estaba inactivo
   */
  function stopCodeEffect(): boolean {
    // Si no está activo, no hacer nada
    if (!state.isActive) return false;

    // Marcar como inactivo
    state.isActive = false;

    // Obtener el canvas
    const canvas = getCanvas();
    if (!canvas) return false;

    // Ocultar el canvas con una animación suave
    hideCanvas(canvas, () => {
      // Limpiar el intervalo cuando termine la animación
      if (state.intervalId) {
        clearInterval(state.intervalId);
        state.intervalId = null;
      }
    });

    // Disparar evento de desactivación
    dispatchEvent(EVENTS.DEACTIVATED);

    return true;
  }

  /**
   * Activa o desactiva el efecto Matrix
   * @returns {boolean} Estado final del efecto (true: activo, false: inactivo)
   */
  function toggleCodeEffect(): boolean {
    if (state.isActive) {
      stopCodeEffect();
    } else {
      initCodeEffect();
    }
    return state.isActive;
  }

  /**
   * Activa el modo avanzado del efecto Matrix
   * @returns {boolean} true si se activó correctamente
   */
  function toggleAdvancedCodeEffect(): boolean {
    // Obtener el canvas
    const canvas = getCanvas();
    if (!canvas) return false;

    // Activar el modo avanzado
    canvas.classList.add('matrix-advanced');
    state.isAdvancedMode = true;

    // Si el efecto ya está activo, reiniciarlo para aplicar los nuevos colores
    if (state.isActive) {
      stopCodeEffect();
      setTimeout(() => {
        initCodeEffect();
      }, 1000);
    } else {
      initCodeEffect();
    }

    return true;
  }

  /**
   * Dispara un evento personalizado para el efecto Matrix
   * @param {string} eventName - Nombre del evento a disparar
   * @param {any} detail - Datos adicionales para el evento
   */
  function dispatchEvent(eventName: string, detail: any = {}): void {
    const event = new CustomEvent(eventName, {
      detail: { ...detail, state: { ...state } },
      bubbles: true
    });
    document.dispatchEvent(event);
  }

  /**
   * Escucha un evento personalizado para el efecto Matrix
   * @param {string} eventName - Nombre del evento a escuchar
   * @param {Function} callback - Función a ejecutar cuando ocurra el evento
   */
  function listenEvent(eventName: string, callback: (event: CustomEvent) => void): void {
    document.addEventListener(eventName, callback as EventListener);
  }

  // Exponer evento personalizado para toggle
  listenEvent(EVENTS.TOGGLE, () => toggleCodeEffect());

  // Exponer evento personalizado para toggle advanced
  listenEvent(EVENTS.TOGGLE_ADVANCED, () => toggleAdvancedCodeEffect());

  // Exponer las funciones al objeto window para mantener compatibilidad con el código existente
  window.initCodeEffect = initCodeEffect;
  window.stopCodeEffect = stopCodeEffect;
  window.toggleCodeEffect = toggleCodeEffect;
  window.toggleAdvancedCodeEffect = toggleAdvancedCodeEffect;

  // Definir interfaz de window para TypeScript
  declare global {
    interface Window {
      toggleMatrixEffect?: () => boolean;
      toggleCodeEffect?: () => boolean;
      toggleAdvancedCodeEffect?: () => boolean;
      initCodeEffect?: typeof initCodeEffect;
      stopCodeEffect?: typeof stopCodeEffect;
    }
  }
</script>
