---
// Terminal.astro - Componente para una terminal interactiva
import './styles.css';
---

<div id="terminal-container" class="hidden fixed bottom-4 right-4 z-50 w-96 h-80 max-w-full shadow-lg rounded-lg overflow-hidden transition-all duration-300 transform scale-95 opacity-0 pointer-events-none">
  <div class="h-full flex flex-col" style="background-color: #1f2937; color: #e5e7eb;">
    <!-- Barra de título de la terminal -->
    <div class="px-4 py-2 flex justify-between items-center" style="background-color: #374151;">
      <div class="text-sm font-medium" style="color: #e5e7eb;">Terminal</div>
      <div class="flex space-x-2">
        <button id="terminal-minimize" class="w-3 h-3 rounded-full bg-yellow-500 hover:bg-yellow-400 transition-colors" title="Minimizar"></button>
        <button id="terminal-maximize" class="w-3 h-3 rounded-full bg-green-500 hover:bg-green-400 transition-colors" title="Maximizar"></button>
        <button id="terminal-close" class="w-3 h-3 rounded-full bg-red-500 hover:bg-red-400 transition-colors" title="Cerrar"></button>
      </div>
    </div>

    <!-- Contenido de la terminal -->
    <div id="terminal-content" class="flex-1 p-4 overflow-y-auto font-mono text-sm terminal-text" style="background-color: #1f2937; color: #e5e7eb;">
      <div id="terminal-output"></div>
      <div class="terminal-input-line flex">
        <span class="terminal-text-green mr-2">$</span>
        <input
          type="text"
          id="terminal-input"
          class="flex-1 bg-transparent outline-none border-none"
          style="color: #ffffff !important;"
          autocomplete="off"
          spellcheck="false"
        />
      </div>
    </div>
  </div>
</div>

<!-- Botón para abrir la terminal -->
<button
  id="terminal-toggle"
  class="fixed bottom-4 right-4 z-40 w-12 h-12 rounded-full bg-primary shadow-lg flex items-center justify-center hover:bg-primary-dark transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
  aria-label="Abrir terminal"
  title="Abrir terminal"
  style="color: white !important;"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
</button>

<!-- Botón para activar el modo desarrollador -->
<button
  id="dev-mode-toggle"
  class="fixed bottom-20 right-5 z-40 w-10 h-10 rounded-full bg-primary shadow-lg flex items-center justify-center hover:bg-primary-dark transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
  aria-label="Activar modo desarrollador"
  title="Activar modo desarrollador"
  style="color: white !important;"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
  </svg>
</button>

<script>
  // Importar los módulos necesarios
  import { processCommand, getCommandSuggestions } from './commands';
  import { setupKonamiCodeDetector } from './game';
  import {
    createAppendToTerminal,
    createToggleTerminal,
    createToggleMaximize,
    makeTerminalDraggable,
    initTerminal
  } from './utils';

  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const terminalContainer = document.getElementById('terminal-container');
    const terminalToggle = document.getElementById('terminal-toggle');
    const terminalClose = document.getElementById('terminal-close');
    const terminalMinimize = document.getElementById('terminal-minimize');
    const terminalMaximize = document.getElementById('terminal-maximize');
    const terminalContent = document.getElementById('terminal-content');
    const terminalOutput = document.getElementById('terminal-output');
    const terminalInput = document.getElementById('terminal-input') as HTMLInputElement;
    const devModeToggle = document.getElementById('dev-mode-toggle');
    const headerElement = terminalContainer?.querySelector('.px-4.py-2.flex.justify-between.items-center') as HTMLElement;

    // Estado de la terminal
    let commandHistory: string[] = [];
    let historyIndex = -1;
    let isDevModeActive = false;
    let currentDirectory = "~";

    // Crear funciones de utilidad
    const appendToTerminal = createAppendToTerminal(terminalOutput, terminalContent);
    const toggleTerminal = createToggleTerminal(terminalContainer, terminalInput);
    const toggleMaximize = createToggleMaximize(terminalContainer);
    const isTerminalOpen = () => terminalContainer?.classList.contains('opacity-100') || false;
    const isMaximized = () => terminalContainer?.classList.contains('inset-4') || false;

    // Hacer que la terminal sea arrastrable
    makeTerminalDraggable(terminalContainer, headerElement, isMaximized);

    // Función para activar/desactivar el modo desarrollador
    function toggleDevMode() {
      if (typeof window.toggleCodeEffect === 'function') {
        isDevModeActive = window.toggleCodeEffect();

        // Actualizar el aspecto del botón según el estado
        if (devModeToggle) {
          if (isDevModeActive) {
            devModeToggle.classList.add('active-dev-mode');
            devModeToggle.setAttribute('title', 'Desactivar modo desarrollador');
          } else {
            devModeToggle.classList.remove('active-dev-mode');
            devModeToggle.setAttribute('title', 'Activar modo desarrollador');
          }
        }

        // Si la terminal está abierta, mostrar un mensaje
        if (isTerminalOpen() && terminalOutput) {
          if (isDevModeActive) {
            appendToTerminal('<span class="terminal-text-green">Modo desarrollador activado.</span>', '', false);
          } else {
            appendToTerminal('<span class="terminal-text-green">Modo desarrollador desactivado.</span>', '', false);
          }
        }
      } else if (isTerminalOpen() && terminalOutput) {
        appendToTerminal('<span class="terminal-text-red">Error: El modo desarrollador no está disponible.</span>', '', false);
      }
    }

    // Manejar el envío de comandos
    function handleCommand(command: string) {
      if (!command.trim()) return;

      // Añadir el comando al historial
      commandHistory.unshift(command);
      historyIndex = -1;

      // Procesar el comando
      const result = processCommand(
        command,
        currentDirectory,
        appendToTerminal,
        toggleTerminal,
        devModeToggle,
        isDevModeActive,
        (active) => { isDevModeActive = active; },
        terminalOutput
      );

      // Actualizar el directorio actual si cambió
      if (result.currentDirectory) {
        currentDirectory = result.currentDirectory;
      }

      // Limpiar el input
      if (terminalInput) {
        terminalInput.value = '';
      }
    }

    // Event listeners
    terminalToggle?.addEventListener('click', toggleTerminal);
    terminalClose?.addEventListener('click', toggleTerminal);
    terminalMaximize?.addEventListener('click', toggleMaximize);
    terminalMinimize?.addEventListener('click', () => {
      if (isMaximized()) {
        toggleMaximize();
      } else {
        toggleTerminal();
      }
    });
    devModeToggle?.addEventListener('click', toggleDevMode);

    // Manejar el envío de comandos
    terminalInput?.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const command = terminalInput.value;
        handleCommand(command);
      } else if (e.key === 'ArrowUp') {
        // Navegar hacia atrás en el historial
        if (historyIndex < commandHistory.length - 1) {
          historyIndex++;
          terminalInput.value = commandHistory[historyIndex];
          // Mover el cursor al final
          setTimeout(() => {
            terminalInput.selectionStart = terminalInput.selectionEnd = terminalInput.value.length;
          }, 0);
        }
        e.preventDefault();
      } else if (e.key === 'ArrowDown') {
        // Navegar hacia adelante en el historial
        if (historyIndex > 0) {
          historyIndex--;
          terminalInput.value = commandHistory[historyIndex];
        } else if (historyIndex === 0) {
          historyIndex = -1;
          terminalInput.value = '';
        }
        e.preventDefault();
      } else if (e.key === 'Tab') {
        // Autocompletar comandos
        e.preventDefault();
        const input = terminalInput.value.toLowerCase();
        if (input) {
          const possibleCommands = getCommandSuggestions(input);

          if (possibleCommands.length === 1) {
            terminalInput.value = possibleCommands[0];
          } else if (possibleCommands.length > 1) {
            appendToTerminal(`<span class="terminal-text-green">${currentDirectory}</span> <span class="terminal-text-white">${input}</span>`, '', true);
            appendToTerminal('<span class="terminal-text-yellow">Posibles comandos:</span> ' + possibleCommands.join(', '), '', true);
          }
        }
      }
    });

    // Enfocar el input cuando se hace clic en el contenido de la terminal
    terminalContent?.addEventListener('click', () => {
      terminalInput?.focus();
    });

    // Añadir soporte para atajos de teclado
    document.addEventListener('keydown', (e) => {
      // Ctrl+Alt+T para abrir/cerrar la terminal
      if (e.ctrlKey && e.altKey && e.key === 't') {
        e.preventDefault();
        toggleTerminal();
      }
    });

    // Configurar el detector del código Konami
    setupKonamiCodeDetector(
      toggleTerminal,
      isTerminalOpen,
      terminalInput
    );

    // Inicializar la terminal
    initTerminal(terminalOutput, terminalInput);

    // Comprobar si el modo desarrollador está activo al cargar la página
    if (typeof window.isCodeEffectActive === 'function' && devModeToggle) {
      isDevModeActive = window.isCodeEffectActive();
      if (isDevModeActive) {
        devModeToggle.classList.add('active-dev-mode');
        devModeToggle.setAttribute('title', 'Desactivar modo desarrollador');
      }
    }

    // Escuchar cambios en el tema
    document.addEventListener('themeChanged', (e: any) => {
      // No hacemos nada con el tema en la terminal
      // La terminal mantiene su aspecto oscuro independientemente del tema del sitio
    });
  });
</script>
