---
import { basics } from "@cv";
// Eliminar la importación del ThemeToggle
const { name } = basics;

// Enlaces de navegación
const navLinks = [
  { href: "#sobre-mi", label: "Sobre mí" },
  { href: "#experiencia", label: "Experiencia" },
  { href: "#proyectos", label: "Proyectos" },
  { href: "#habilidades", label: "Habilidades" },
  { href: "#contacto", label: "Contacto" },
];
---

<header id="main-header" class="fixed w-full top-0 left-0 z-30 transition-colors duration-300 py-4 dark:bg-dark/90 bg-white/90 backdrop-blur-sm border-b dark:border-gray-800 border-gray-100">
  <div class="container mx-auto px-4">
    <!-- Navegación desktop y móvil -->
    <nav class="flex items-center justify-between">
      <!-- Logo -->
      <a href="#" class="text-gray-900 dark:text-white font-bold text-xl flex items-center">
        <span class="text-primary">&lt;</span>{name}<span class="text-primary">/&gt;</span>
      </a>

      <!-- Navegación desktop (visible en md+) -->
      <ul class="hidden md:flex space-x-8">
        {navLinks.map(({ href, label }) => (
          <li>
            <a href={href} class="nav-link text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
              {label}
            </a>
          </li>
        ))}
      </ul>

      <!-- Botón de menú móvil (visible solo en móvil) -->
      <button
        id="mobile-menu-button"
        class="md:hidden text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary"
        aria-label="Abrir menú"
        title="Abrir menú"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>
    </nav>
  </div>

  <!-- Menú móvil (oculto por defecto) -->
  <div id="mobile-menu" class="hidden md:hidden absolute left-0 right-0 top-full bg-white dark:bg-dark-secondary border-b dark:border-gray-800 border-gray-100 shadow-lg">
    <div class="container mx-auto px-4 py-3">
      <ul class="space-y-2">
        {navLinks.map(({ href, label }) => (
          <li>
            <a href={href} class="nav-link block py-2 text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary transition-colors">
              {label}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<script>
  // Script para manejar el menú móvil
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const navLinks = document.querySelectorAll('.nav-link');
    const header = document.getElementById('main-header');

    // Mostrar/ocultar el menú móvil
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Cerrar el menú móvil al hacer clic en un enlace
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (mobileMenu) {
          mobileMenu.classList.add('hidden');
        }
      });
    });

    // Resaltar la sección activa durante el desplazamiento
    const updateActiveSection = () => {
      const sections = document.querySelectorAll('section[id]');
      // Asegurar que header no sea null antes de usar offsetHeight
      const scrollPosition = window.scrollY + (header?.offsetHeight || 0) + 100;

      sections.forEach(section => {
        const sectionElement = section as HTMLElement; // Cast para usar offsetTop y offsetHeight
        const sectionTop = sectionElement.offsetTop;
        const sectionHeight = sectionElement.offsetHeight;
        const sectionId = section.getAttribute('id');
        const link = document.querySelector(`.nav-link[href="#${sectionId}"]`);

        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navLinks.forEach(el => el.classList.remove('text-primary'));
          link?.classList.add('text-primary');
        }
      });
    };

    // Añadir listeners para el desplazamiento
    window.addEventListener('scroll', () => {
      updateActiveSection();
    });

    // Inicializar
    updateActiveSection();
  });
</script>

<style>
  /* Animación suave para el header */
  header {
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.95);
    width: 100%;
    left: 0;
    right: 0;
  }

  /* Estilo para el header en modo oscuro */
  :global(.dark) header {
    background-color: rgba(30, 30, 30, 0.95);
  }

  /* Estilo para el enlace activo */
  header nav a.active {
    color: var(--color-primary);
    font-weight: 600;
  }
</style>
