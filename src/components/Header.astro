---
import { basics } from "@cv";
import { MenuIcon } from "../icons";
import ThemeToggle from "./ThemeToggle.astro";
const { name } = basics;

const navLinks = [
  { href: "#sobre-mi", label: "Sobre mí" },
  { href: "#experiencia", label: "Experiencia" },
  { href: "#proyectos", label: "Proyectos" },
  { href: "#habilidades", label: "Habilidades" },
  { href: "#contacto", label: "Contacto" },
];

const elegantLinkClasses =
  "relative after:absolute after:bg-gradient-to-r after:from-primary after:to-secondary-blue after:h-0.5 after:w-0 after:left-1/2 after:-bottom-1 after:transform after:-translate-x-1/2 after:transition-all after:duration-300 hover:after:w-full focus:after:w-full";
---

<header
  id="main-header"
  class="fixed w-full top-0 left-0 z-30 transition-colors duration-300 py-4 bg-background/90 backdrop-blur-sm border-b border-border"
>
  <div
    id="reading-progress-container"
    class="absolute top-full left-0 w-full h-0.5 bg-background-surface"
  >
    <div id="reading-progress" class="h-full bg-primary w-0 transition-all duration-100"></div>
  </div>

  <div class="container mx-auto px-4">
    <nav class="flex items-center justify-between">
      <a
        href="#"
        id="logo-link"
        class:list={["text-text font-bold text-xl flex items-center", elegantLinkClasses]}
      >
        <span class="text-primary">&lt;</span>{name}<span class="text-primary">/&gt;</span>
      </a>

      <ul class="hidden lg:flex items-center space-x-8">
        {
          navLinks.map(({ href, label }) => (
            <li>
              <a
                href={href}
                class:list={[
                  "nav-link text-text-muted hover:text-secondary-blue transition-colors duration-300",
                  elegantLinkClasses,
                ]}
              >
                {label}
              </a>
            </li>
          ))
        }
        <li>
          <ThemeToggle />
        </li>
      </ul>

      <button
        id="mobile-menu-button"
        class="lg:hidden text-text-muted hover:text-primary p-2 transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-md"
        aria-label="Abrir menú"
        title="Abrir menú"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <MenuIcon class="h-6 w-6" />
      </button>
    </nav>
  </div>

  <div
    id="mobile-menu"
    role="menu"
    class="hidden lg:hidden absolute left-0 right-0 top-full bg-background shadow-lg border-b border-border backdrop-blur-sm"
  >
    <div class="container mx-auto px-4 py-3">
      <ul class="space-y-2">
        {
          navLinks.map(({ href, label }) => (
            <li>
              <a
                href={href}
                role="menuitem"
                class="nav-link block py-2 text-text-muted hover:text-primary transition-colors duration-300"
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button") as HTMLButtonElement;
    const mobileMenu = document.getElementById("mobile-menu") as HTMLElement;
    const header = document.getElementById("main-header") as HTMLElement;

    const toggleMenu = (forceClose = false) => {
      const isHidden = mobileMenu.classList.contains("hidden");
      if (forceClose || !isHidden) {
        mobileMenu.style.opacity = "0";
        mobileMenu.style.transform = "translateY(-10px)";
        setTimeout(() => {
          mobileMenu.classList.add("hidden");
          mobileMenu.style.transition = "";
        }, 200);
        mobileMenuButton.setAttribute("aria-expanded", "false");
      } else {
        mobileMenu.classList.remove("hidden");
        mobileMenu.style.opacity = "0";
        mobileMenu.style.transform = "translateY(-10px)";
        requestAnimationFrame(() => {
          mobileMenu.style.transition = "opacity 0.2s ease, transform 0.2s ease";
          mobileMenu.style.opacity = "1";
          mobileMenu.style.transform = "translateY(0)";
        });
        mobileMenuButton.setAttribute("aria-expanded", "true");
      }
    };

    mobileMenuButton.addEventListener("click", () => toggleMenu());
    document.querySelectorAll(".nav-link, #logo-link").forEach((link) => {
      link.addEventListener("click", () => toggleMenu(true));
    });

    const navLinks = document.querySelectorAll(".nav-link");
    const sections = document.querySelectorAll("section[id]");

    const updateActiveSection = () => {
      const scrollPosition = window.scrollY + header.offsetHeight + 100;
      let activeSectionFound = false;

      sections.forEach((section) => {
        const sectionEl = section as HTMLElement;
        const link = document.querySelector(`.nav-link[href="#${section.id}"]`);
        if (!link) return;

        if (
          sectionEl.offsetTop <= scrollPosition &&
          sectionEl.offsetTop + sectionEl.offsetHeight > scrollPosition
        ) {
          link.classList.add("text-primary");
          link.classList.remove("text-text-muted");
          activeSectionFound = true;
        } else {
          link.classList.remove("text-primary");
          link.classList.add("text-text-muted");
        }
      });
      // If no section is active (e.g., at the top or bottom of the page), clear all active states
      if (!activeSectionFound) {
        navLinks.forEach((link) => {
          link.classList.remove("text-primary");
          link.classList.add("text-text-muted");
        });
      }
    };

    window.addEventListener("scroll", updateActiveSection, { passive: true });
    updateActiveSection();

    const progressBar = document.getElementById("reading-progress");
    if (progressBar) {
      const updateProgressBar = () => {
        const scrollPosition = window.scrollY;
        const totalHeight = document.body.scrollHeight - window.innerHeight;
        const progress = (scrollPosition / totalHeight) * 100;
        if (progressBar instanceof HTMLElement) {
          progressBar.style.width = `${progress}%`;
        }
      };

      window.addEventListener("scroll", updateProgressBar, { passive: true });
      window.addEventListener("resize", updateProgressBar, { passive: true });
      updateProgressBar();
    }
  });
</script>
