---
/**
 * Header.astro - Encabezado principal y navegación del sitio
 *
 * Características:
 * - Barra de navegación fija en la parte superior
 * - Menú responsive que se adapta a móvil y desktop
 * - Resalta automáticamente la sección activa durante el desplazamiento
 * - Incluye logo/nombre y enlaces a las secciones principales
 */
import { basics } from "@cv";
import { MenuIcon } from "../icons";
const { name } = basics;

// Enlaces de navegación
const navLinks = [
  { href: "#sobre-mi", label: "Sobre mí" },
  { href: "#experiencia", label: "Experiencia" },
  { href: "#proyectos", label: "Proyectos" },
  { href: "#habilidades", label: "Habilidades" },
  { href: "#contacto", label: "Contacto" },
];
---

<header
  id="main-header"
  class="fixed w-full top-0 left-0 z-30 transition-colors duration-300 py-4 bg-fondo-secundario/90 backdrop-blur-sm border-b border-borde-principal"
>
  <div class="container mx-auto px-4">
    <!-- Navegación desktop y móvil -->
    <nav class="flex items-center justify-between">
      <!-- Logo -->
      <a href="#" id="logo-link" class="text-texto-principal font-bold text-xl flex items-center">
        <span class="text-cian-acento">&lt;</span>{name}<span class="text-cian-acento">/&gt;</span>
      </a>

      <!-- Navegación desktop (visible en md+) -->
      <ul class="hidden md:flex space-x-8">
        {
          navLinks.map(({ href, label }) => (
            <li>
              <a
                href={href}
                class="nav-link text-texto-secundario hover:text-cian-acento transition-colors"
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Botón de menú móvil (visible solo en móvil) -->
      <button
        id="mobile-menu-button"
        class="md:hidden text-texto-secundario hover:text-cian-acento p-2"
        aria-label="Abrir menú"
        title="Abrir menú"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <MenuIcon class="h-6 w-6" />
      </button>
    </nav>
  </div>

  <!-- Menú móvil (oculto por defecto) -->
  <div
    id="mobile-menu"
    role="menu"
    class="hidden md:hidden absolute left-0 right-0 top-full bg-fondo-secundario shadow-lg border-b border-borde-principal"
  >
    <div class="container mx-auto px-4 py-3">
      <ul class="space-y-2">
        {
          navLinks.map(({ href, label }) => (
            <li>
              <a
                href={href}
                role="menuitem"
                class="nav-link block py-2 text-texto-secundario hover:text-cian-acento transition-colors"
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</header>

<script>
  // Script para manejar el menú móvil
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById(
      "mobile-menu-button"
    ) as HTMLButtonElement | null;
    const mobileMenu = document.getElementById("mobile-menu");
    const navLinks = document.querySelectorAll(".nav-link");
    const logoLink = document.getElementById("logo-link");
    const header = document.getElementById("main-header");

    // Mostrar/ocultar el menú móvil
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", () => {
        const isExpanded = mobileMenu.classList.toggle("hidden");
        mobileMenuButton.setAttribute("aria-expanded", String(!isExpanded));
      });
    }

    // Cerrar el menú móvil al hacer clic en un enlace
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        if (mobileMenu && mobileMenuButton) {
          mobileMenu.classList.add("hidden");
          mobileMenuButton.setAttribute("aria-expanded", "false");
        }
      });
    });

    // Cerrar el menú móvil al hacer clic en el logo/enlace home
    if (logoLink && mobileMenu && mobileMenuButton) {
      logoLink.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
        mobileMenuButton.setAttribute("aria-expanded", "false");
      });
    }

    // Resaltar la sección activa durante el desplazamiento
    const updateActiveSection = () => {
      const sections = document.querySelectorAll("section[id]");
      // Asegurar que header no sea null antes de usar offsetHeight
      const scrollPosition = window.scrollY + (header?.offsetHeight || 0) + 100;

      sections.forEach((section) => {
        const sectionElement = section as HTMLElement;
        const sectionTop = sectionElement.offsetTop;
        const sectionHeight = sectionElement.offsetHeight;
        const sectionId = section.getAttribute("id");
        const link = document.querySelector(`.nav-link[href="#${sectionId}"]`);

        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navLinks.forEach((el) => {
            el.classList.remove("text-cian-acento");
            el.classList.add("text-texto-secundario");
          });
          link?.classList.remove("text-texto-secundario");
          link?.classList.add("text-cian-acento");
        }
      });
    };

    // Añadir listeners para el desplazamiento
    window.addEventListener("scroll", () => {
      updateActiveSection();
    });

    // Inicializar
    updateActiveSection();
  });
</script>

<style>
  /* El backdrop-filter se maneja con la clase `backdrop-blur-sm` de Tailwind */
  /* Los colores de fondo y bordes se manejan con clases de Tailwind */
  /* Las transiciones y hovers están definidos en las clases de Tailwind */

  /* Estilo para el enlace activo */
  header nav a.active {
    /* El script ahora maneja el color del texto activo directamente */
    font-weight: 600;
  }
</style>
