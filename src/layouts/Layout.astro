---
/**
 * Layout.astro - Componente de plantilla principal para todas las páginas
 *
 * Características:
 * - Configura el HTML base, metadatos SEO y estilos globales
 * - Incluye componentes principales como Header
 * - Tema oscuro por defecto para una experiencia moderna
 * - Proporciona una estructura semántica accesible
 */
import globalStyles from "../styles/global.css?inline";
import fontStyles from "../styles/fonts.css?inline";
import { SEO } from "astro-seo";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Header from "@/components/Header.astro";
import cvData from "@cv"; // Importar datos del CV

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = "Sergio Márquez | Desarrollador Full Stack y Experto en IA",
  description = "Portfolio de Sergio Márquez Pérez, Desarrollador Full Stack experto en Java, Spring, Angular, IA y Cloud. Descubre mis proyectos y experiencia en desarrollo web.",
  image = "/img/sergio_marquez_perez_ia_profile_pic_2-1.webp",
} = Astro.props;

const { basics, work, education, highlightedSkills, otherSkills, databasesSkills } = cvData;
const siteUrl = Astro.site ? Astro.site.toString().slice(0, -1) : basics.url; // Asegurar que no haya / al final
const fullNameForSchema = basics.name.includes("Pérez") ? basics.name : basics.name + " Pérez"; // Ensure Pérez is added if not present

const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: fullNameForSchema, // Updated to full name
  url: siteUrl,
  image: `${siteUrl}${basics.image}`,
  jobTitle: "Desarrollador Full Stack", // Updated jobTitle
  worksFor:
    work.length > 0
      ? {
          "@type": "Organization",
          name: work[0].company,
        }
      : undefined,
  alumniOf: education.map((edu) => ({
    "@type": "EducationalOrganization",
    name: edu.institution,
  })),
  sameAs: basics.profiles.map((profile) => profile.url),
  knowsAbout: [
    ...highlightedSkills.map((skill) => skill.name),
    ...otherSkills.map((skill) => skill.name),
    ...databasesSkills.map((skill) => skill.name),
  ].filter((value, index, self) => self.indexOf(value) === index), // Eliminar duplicados
};
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    {/* Estilos CSS incrustados para eliminar recursos que bloquean el renderizado */}
    <style set:html={fontStyles}></style>
    <style set:html={globalStyles}></style>

    <meta name="generator" content={Astro.generator} />

    <!-- Preload de fuentes críticas para mejorar el LCP -->
    <link
      rel="preload"
      href="/fonts/montserrat-v29-latin_latin-ext-700.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/inter-v18-latin_latin-ext-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/inter-v18-latin_latin-ext-500.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: `${siteUrl}${image}`,
        },
        optional: {
          description: description,
        },
      }}
      twitter={{
        card: "summary_large_image",
        creator: "@smarquezdev",
        title: title,
        description: description,
        image: `${siteUrl}${image}`,
      }}
      extend={{
        meta: [
          {
            name: "author",
            content: fullNameForSchema, // Using full name for author too
          },
          {
            name: "keywords",
            content: `Sergio Márquez, Sergio Márquez Pérez, Desarrollador Full Stack, Backend Developer, Frontend Developer, Java, Spring Framework, Angular, Inteligencia Artificial, IA, Docker, Kubernetes, Cloud Computing, Portfolio, ${highlightedSkills.map((s) => s.name).join(", ")}`, // Updated keywords
          },
        ],
      }}
    />

    <script is:inline type="application/ld+json" set:html={JSON.stringify(personSchema)} />
  </head>
  <body class="bg-body text-text-main">
    <ScrollToTop />
    <Header />
    <slot />
  </body>
</html>
