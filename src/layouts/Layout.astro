---
/**
 * Layout.astro - Componente de plantilla principal para todas las páginas
 *
 * Características:
 * - Configura el HTML base, metadatos SEO y estilos globales
 * - Incluye componentes principales como Header
 * - Tema oscuro por defecto para una experiencia moderna
 * - Proporciona una estructura semántica accesible
 */
import globalStyles from "../styles/global.css?inline";
import fontStyles from "../styles/fonts.css?inline";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Header from "@/components/Header.astro";
import cvData from "@cv"; // Importar datos del CV

export interface Props {
  title?: string;
  description?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title = "Sergio Márquez | Desarrollador Full Stack y Experto en IA",
  description = "Portfolio de Sergio Márquez Pérez, Desarrollador Full Stack experto en Java, Spring, Angular, IA y Cloud. Descubre mis proyectos y experiencia en desarrollo web.",
} = Astro.props;

const { basics, work, education, highlightedSkills, otherSkills, databasesSkills } = cvData;
const siteUrl = Astro.site ? Astro.site.toString().slice(0, -1) : basics.url; // Asegurar que no haya / al final
const fullNameForSchema = basics.name.includes("Pérez") ? basics.name : basics.name + " Pérez"; // Ensure Pérez is added if not present

const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: fullNameForSchema, // Updated to full name
  url: siteUrl,
  image: `${siteUrl}${basics.image}`,
  jobTitle: "Desarrollador Full Stack", // Updated jobTitle
  worksFor:
    work.length > 0
      ? {
          "@type": "Organization",
          name: work[0].company,
        }
      : undefined,
  alumniOf: education.map((edu) => ({
    "@type": "EducationalOrganization",
    name: edu.institution,
  })),
  sameAs: basics.profiles.map((profile) => profile.url),
  knowsAbout: [
    ...highlightedSkills.map((skill) => skill.name),
    ...otherSkills.map((skill) => skill.name),
    ...databasesSkills.map((skill) => skill.name),
  ].filter((value, index, self) => self.indexOf(value) === index), // Eliminar duplicados
};
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    {/* Estilos CSS incrustados para eliminar recursos que bloquean el renderizado */}
    <style set:html={fontStyles}></style>
    <style set:html={globalStyles}></style>

    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />

    <!-- ✅ PERFORMANCE: Preload critical resources -->
    <link
      rel="preload"
      href="/fonts/montserrat-v29-latin_latin-ext-700.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- ✅ PERFORMANCE: DNS prefetch for external services -->
    <link rel="dns-prefetch" href="//api.web3forms.com" />

    <!-- ✅ PERFORMANCE: Resource hints -->
    <meta name="theme-color" content="#030712" />
    <meta name="color-scheme" content="dark" />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Sergio Márquez Pérez" />
    <meta
      name="keywords"
      content="desarrollador, backend, IA, ML, inteligencia artificial, machine learning, Java, Spring Framework, Python, portfolio"
    />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content={new URL("/img/sergio_marquez_perez_ia_profile_pic_2-1.webp", Astro.url)}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:locale" content="es_ES" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta
      property="twitter:image"
      content={new URL("/img/sergio_marquez_perez_ia_profile_pic_2-1.webp", Astro.url)}
    />
    <meta property="twitter:creator" content="@sergiomzdev" />

    <script is:inline type="application/ld+json" set:html={JSON.stringify(personSchema)} />
  </head>
  <body class="bg-fondo-principal text-texto-secundario font-sans">
    <ScrollToTop />
    <Header />
    <slot />

    <!-- ✅ PERFORMANCE: Lazy load non-critical components -->
    <script is:inline type="module">
      // Intersection Observer para lazy loading futuro
      if ("IntersectionObserver" in window) {
        // Observer will be used by individual components
        window.lazyLoadObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("in-view");
              }
            });
          },
          {
            rootMargin: "50px 0px",
            threshold: 0.1,
          }
        );
      }
    </script>
  </body>
</html>
