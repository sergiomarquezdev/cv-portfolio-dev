---
import "@fontsource-variable/inter";
import "@fontsource/montserrat/400.css";
import "@fontsource/montserrat/700.css";
import "@fontsource/fira-code/400.css";

import globalStyles from "../styles/global.css?inline";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Header from "@/components/Header.astro";
import cvData from "@cv";

export interface Props {
  title?: string;
  description?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title = "Sergio Márquez | Backend & IA/ML Engineer",
  description = "Portfolio de Sergio Márquez Pérez, Ingeniero Backend e IA/ML especializado en Java, Spring, Python, FastAPI, Docker, Kubernetes y Google Cloud. Descubre mis proyectos, automatizaciones y experiencia.",
} = Astro.props;

const { basics, work, education, highlightedSkills, otherSkills, databasesSkills } = cvData;
const siteUrl = Astro.site ? Astro.site.toString().slice(0, -1) : basics.url;
const fullNameForSchema = basics.name.includes("Pérez") ? basics.name : basics.name + " Pérez";

const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: fullNameForSchema,
  url: siteUrl,
  image: `${siteUrl}${basics.image}`,
  jobTitle: "Ingeniero Backend IA/ML",
  worksFor:
    work.length > 0
      ? {
          "@type": "Organization",
          name: work[0].company,
        }
      : undefined,
  alumniOf: education.map((edu) => ({
    "@type": "EducationalOrganization",
    name: edu.institution,
  })),
  sameAs: basics.profiles.map((profile) => profile.url),
  knowsAbout: [
    ...highlightedSkills.map((skill) => skill.name),
    ...otherSkills.map((skill) => skill.name),
    ...databasesSkills.map((skill) => skill.name),
  ].filter((value, index, self) => self.indexOf(value) === index),
};
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <style set:html={globalStyles}></style>

    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />

    <meta name="theme-color" content="#ffffff" />
    <meta name="color-scheme" content="light" />

    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Sergio Márquez Pérez" />
    <meta
      name="keywords"
      content="desarrollador backend, IA, ML, inteligencia artificial, machine learning, Java, Spring Framework, Python, FastAPI, Docker, Kubernetes, Google Cloud, n8n, LLMOps, portfolio"
    />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content={new URL("/img/sergio_marquez_perez_ia_profile_og_image.png", Astro.url)}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:locale" content="es_ES" />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta
      property="twitter:image"
      content={new URL("/img/sergio_marquez_perez_ia_profile_og_image.png", Astro.url)}
    />
    <meta property="twitter:creator" content="@sergiomzdev" />

    <script is:inline type="application/ld+json" set:html={JSON.stringify(personSchema)} />
  </head>
  <body class="font-sans">
    <ScrollToTop />
    <Header />
    <slot />

    <!-- Unified JavaScript System -->
    <script is:inline>
      // Unified Observer System for Portfolio
      (function() {
        let observersMap = new Map();
        let progressBar = null;

        function initializeObservers() {
          // Configuración para cada tipo de animación
          const observerConfigs = [
            {
              selector: '.fade-in-section',
              callback: function(element) {
                element.classList.add('in-view');
              },
              options: {
                rootMargin: '0px 0px -100px 0px',
                threshold: 0.1
              }
            },
            {
              selector: '.skill-category',
              callback: function(element) {
                const skillItems = element.querySelectorAll('.skill-item');
                skillItems.forEach(function(item, index) {
                  item.style.setProperty('--animation-delay', (index * 50) + 'ms');
                  item.classList.add('animate-fade-in-up');
                });
              },
              options: { threshold: 0.1 }
            },
            {
              selector: '.paragraph-container',
              callback: function(element) {
                const index = Array.from(document.querySelectorAll('.paragraph-container')).indexOf(element);
                element.style.setProperty('--animation-delay', (index * 200) + 'ms');
                element.classList.add('animate-fade-in-up');
              },
              options: { threshold: 0.1 }
            }
          ];

          // Crear observers optimizados
          observerConfigs.forEach(function(config) {
            const observer = new IntersectionObserver(
              function(entries) {
                entries.forEach(function(entry) {
                  if (entry.isIntersecting) {
                    config.callback(entry.target);
                    observer.unobserve(entry.target);
                  }
                });
              },
              config.options
            );

            // Observar elementos existentes
            document.querySelectorAll(config.selector).forEach(function(element) {
              observer.observe(element);
            });

            observersMap.set(config.selector, observer);
          });
        }

        function initializeProgressBar() {
          progressBar = document.getElementById('reading-progress');
          if (!progressBar) return;

          function updateProgressBar() {
            const scrollPosition = window.scrollY;
            const totalHeight = document.body.scrollHeight - window.innerHeight;
            const progress = (scrollPosition / totalHeight) * 100;
            progressBar.style.width = Math.max(0, Math.min(100, progress)) + '%';
          }

          // Throttled scroll handler for better performance
          let ticking = false;
          function handleScroll() {
            if (!ticking) {
              requestAnimationFrame(function() {
                updateProgressBar();
                ticking = false;
              });
              ticking = true;
            }
          }

          window.addEventListener('scroll', handleScroll, { passive: true });
          window.addEventListener('resize', updateProgressBar, { passive: true });
          updateProgressBar();
        }

        function initializePortfolio() {
          if ('IntersectionObserver' in window) {
            initializeObservers();
          } else {
            // Fallback for browsers without IntersectionObserver
            document.querySelectorAll('.fade-in-section, .skill-category, .paragraph-container').forEach(function(element) {
              element.classList.add('in-view', 'animate-fade-in-up');
            });
          }

          initializeProgressBar();
        }

        // Initialize
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializePortfolio);
        } else {
          initializePortfolio();
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
          observersMap.forEach(function(observer) {
            observer.disconnect();
          });
          observersMap.clear();
        });
      })();
    </script>
  </body>
</html>
