---
/**
 * Layout.astro - Componente de plantilla principal para todas las páginas
 *
 * Características:
 * - Configura el HTML base, metadatos SEO y estilos globales
 * - Incluye componentes principales como Terminal, Header y FloatingToolbar
 * - Maneja la lógica de cambio de tema claro/oscuro
 * - Proporciona una estructura semántica accesible
 */
import "../styles/global.css";
import { SEO } from "astro-seo";
import MatrixEffect from "@/components/features/matrix/MatrixEffect.astro";
import Terminal from "@/components/Terminal.astro";
import ScrollToTop from "@/components/ScrollToTop.astro";
import Header from "@/components/Header.astro";
import FloatingToolbar from "@/components/features/toolbar/FloatingToolbar.astro";
import cvData from "@cv"; // Importar datos del CV

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = "Sergio Márquez | Desarrollador Full Stack y Experto en IA",
  description = "Portfolio de Sergio Márquez Pérez, Desarrollador Full Stack experto en Java, Spring, Angular, IA y Cloud. Descubre mis proyectos y experiencia en desarrollo web.",
  image = "/img/sergio_marquez_perez_ia_profile_pic_2-1.png"
} = Astro.props;

const { basics, work, education, highlightedSkills, otherSkills, databasesSkills } = cvData;
const siteUrl = Astro.site ? Astro.site.toString().slice(0, -1) : basics.url; // Asegurar que no haya / al final
const fullNameForSchema = basics.name.includes("Pérez") ? basics.name : basics.name + " Pérez"; // Ensure Pérez is added if not present

const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": fullNameForSchema, // Updated to full name
  "url": siteUrl,
  "image": `${siteUrl}${basics.image}`,
  "jobTitle": "Desarrollador Full Stack", // Updated jobTitle
  "worksFor": work.length > 0 ? {
    "@type": "Organization",
    "name": work[0].company
  } : undefined,
  "alumniOf": education.map(edu => ({
    "@type": "EducationalOrganization",
    "name": edu.institution
  })),
  "sameAs": basics.profiles.map(profile => profile.url),
  "knowsAbout": [
    ...highlightedSkills.map(skill => skill.name),
    ...otherSkills.map(skill => skill.name),
    ...databasesSkills.map(skill => skill.name)
  ].filter((value, index, self) => self.indexOf(value) === index) // Eliminar duplicados
};
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />

    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: `${siteUrl}${image}`,
        },
        optional: {
          description: description,
        },
      }}
      twitter={{
        card: "summary_large_image",
        creator: "@smarquezdev",
        title: title,
        description: description,
        image: `${siteUrl}${image}`,
      }}
      extend={{
        meta: [
          {
            name: "author",
            content: fullNameForSchema, // Using full name for author too
          },
          {
            name: "keywords",
            content: `Sergio Márquez, Sergio Márquez Pérez, Desarrollador Full Stack, Backend Developer, Frontend Developer, Java, Spring Framework, Angular, Inteligencia Artificial, IA, Docker, Kubernetes, Cloud Computing, Portfolio, ${highlightedSkills.map(s => s.name).join(", ")}` // Updated keywords
          }
        ]
      }}
    />

    <script is:inline type="application/ld+json" set:html={JSON.stringify(personSchema)} />

    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Theme script -->
    <script is:inline>
      // Código para gestión del tema (claro/oscuro)
      const theme = (() => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      window.localStorage.setItem("theme", theme);

      // Escuchar cambios en la preferencia del sistema
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", e => {
        if (localStorage.getItem("theme") === null) {
          if (e.matches) {
            document.documentElement.classList.add("dark");
            localStorage.setItem("theme", "dark");
          } else {
            document.documentElement.classList.remove("dark");
            localStorage.setItem("theme", "light");
          }
        }
      });
    </script>
  </head>
  <body class="transition-colors duration-300 dark:bg-dark dark:text-dark-primary">
    <MatrixEffect/>
    <Terminal/>
    <ScrollToTop/>
    <Header />
    <slot />
    <FloatingToolbar/>
  </body>
</html>
