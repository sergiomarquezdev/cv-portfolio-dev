This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: src/icons/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.eslintrc.json
.github/workflows/deploy.yml
.gitignore
.prettierrc
accessibility.config.js
astro.config.mjs
cv.json
package.json
postcss.config.js
public/robots.txt
README.md
src/components/Header.astro
src/components/Section.astro
src/components/sections/About.astro
src/components/sections/Certificates.astro
src/components/sections/Contact.astro
src/components/sections/Education.astro
src/components/sections/Experience.astro
src/components/sections/Hero.astro
src/components/sections/Projects.astro
src/components/sections/Skills.astro
src/cv.d.ts
src/env.d.ts
src/layouts/Layout.astro
src/pages/index.astro
src/styles/global.css
src/types.d.ts
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".eslintrc.json">
{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:astro/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "no-unused-vars": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "no-console": ["warn", { "allow": ["warn", "error"] }]
  },
  "overrides": [
    {
      "files": ["*.astro"],
      "parser": "astro-eslint-parser",
      "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "extraFileExtensions": [".astro"]
      },
      "rules": {
        "astro/no-set-html-directive": "error",
        "astro/no-unused-define-vars-in-style": "warn",
        "astro/prefer-class-list-directive": "warn"
      }
    }
  ]
}
</file>

<file path=".github/workflows/deploy.yml">
name: Deploy Astro App to VPS

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Type check
              run: npm run check

            - name: Build Astro app
              run: npm run build

            - name: Create .nojekyll file
              run: touch ./dist/.nojekyll

            - name: Prepare deployment on server
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  script: |
                      # Backup .env file if it exists
                      if [ -f /var/www/portfolio-dev/.env ]; then
                        echo "Backing up .env file"
                        cp /var/www/portfolio-dev/.env /tmp/portfolio-dev-env-backup
                      fi

                      # Clean directory but preserve .env
                      sudo rm -rf /var/www/portfolio-dev/*
                      sudo mkdir -p /var/www/portfolio-dev
                      sudo chown -R ${{ secrets.VPS_USER }}:$USER /var/www/portfolio-dev
                      sudo chmod -R 775 /var/www/portfolio-dev

                      # Restore .env file if backup exists
                      if [ -f /tmp/portfolio-dev-env-backup ]; then
                        echo "Restoring .env file"
                        cp /tmp/portfolio-dev-env-backup /var/www/portfolio-dev/.env
                        rm /tmp/portfolio-dev-env-backup
                      fi

            - name: Deploy files via SSH
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  source: "dist/*"
                  target: "/var/www/portfolio-dev/"
                  strip_components: 1

            - name: Restart Nginx
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  script: |
                      sudo systemctl restart nginx

            - name: Verify deployment
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  script: |
                      if [ ! -f /var/www/portfolio-dev/index.html ]; then
                        echo "Deployment failed: index.html not found"
                        exit 1
                      fi
                      echo "Deployment verified successfully"
</file>

<file path=".gitignore">
# build output
dist/
.output/

# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# environment variables
.env
.env.production
.env.local
.env.development

# macOS-specific files
.DS_Store

# Editors
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea/
.cursor/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Logs
logs
*.log

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Astro cache
.astro/

# Partytown cache
.partytown/
</file>

<file path=".prettierrc">
{
  "printWidth": 100,
  "semi": true,
  "singleQuote": false,
  "tabWidth": 2,
  "trailingComma": "es5",
  "useTabs": false,
  "bracketSpacing": true,
  "bracketSameLine": false,
  "arrowParens": "always",
  "endOfLine": "lf",
  "plugins": ["prettier-plugin-astro"],
  "overrides": [
    {
      "files": "*.astro",
      "options": {
        "parser": "astro"
      }
    },
    {
      "files": "*.md",
      "options": {
        "proseWrap": "preserve"
      }
    }
  ]
}
</file>

<file path="accessibility.config.js">
// Configuración para verificaciones de accesibilidad
// Para usar con pa11y o herramientas similares

export default {
  standard: 'WCAG2AA', // Nivel de conformidad WCAG 2.0 AA
  timeout: 30000,      // Tiempo máximo para cargar la página (30 segundos)
  wait: 1000,          // Esperar 1 segundo antes de ejecutar pruebas
  ignore: [
    // Ignorar advertencias que no aplican
    'WCAG2AA.Principle1.Guideline1_4.1_4_3.G18.Fail',
    // Personaliza según tus necesidades
  ],
  chromeLaunchConfig: {
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--disable-gpu',
      '--window-size=1920,1080',
    ],
  },
  includeNotices: false,   // No incluir notificaciones en resultados
  includeWarnings: true,   // Incluir advertencias en resultados
  log: {
    debug: process.env.NODE_ENV !== 'production',
    error: console.error,
    info: process.env.NODE_ENV !== 'production' ? console.log : () => {},
  },
  urls: [
    // Lista de URLs para verificar
    'https://sergiomarquez.dev/'
    // Añade más URLs específicas según sea necesario
  ],
  // Acciones para realizar antes de las pruebas
  // Como navegar a ciertas partes de la página
  actions: [
    // 'set field #search to portfolio',
    // 'click element #submit',
    // 'wait for element #results to be visible'
  ],
};
</file>

<file path="astro.config.mjs">
import { defineConfig } from "astro/config";
import partytown from "@astrojs/partytown";
import sitemap from "@astrojs/sitemap";
import tailwind from "@astrojs/tailwind";

export default defineConfig({
    site: "https://sergiomarquez.dev/",
    output: "static",
    integrations: [
        sitemap({
            filter: (page) => !page.includes('/_'),
        }),
        partytown({
            config: {
                forward: ["dataLayer.push"],
                debug: false,
            },
        }),
        tailwind(),
    ],
    compressHTML: true,
    trailingSlash: "never",
    build: {
        inlineStylesheets: "auto",
    },
    image: {
        // Opciones de optimización de imágenes
        service: {
            entrypoint: 'astro/assets/services/sharp',
        },
        domains: [], // Dominios permitidos para imágenes externas
        remotePatterns: [
            {
                protocol: 'https',
                hostname: '**.sergiomarquez.dev',
            },
        ],
    },
    vite: {
        build: {
            cssMinify: "lightningcss",
            assetsInlineLimit: 4096,
            minify: 'terser',
            terserOptions: {
                compress: {
                    drop_console: true,
                },
            },
            rollupOptions: {
                output: {
                    entryFileNames: 'entry.[hash].js',
                    chunkFileNames: 'chunks/chunk.[hash].js',
                    assetFileNames: 'assets/asset.[hash][extname]',
                    manualChunks: (id) => {
                        if (id.includes('node_modules')) {
                            return 'vendor';
                        }
                    },
                },
            },
        },
        ssr: {
            noExternal: ['@astrojs/*'],
        },
        // Optimización de cache en desarrollo
        optimizeDeps: {
            exclude: [],
        },
    },
    // Configuración de Content Collections (descomentar si se utilizan)
    // experimental: {
    //     contentCollections: true,
    // },
});
</file>

<file path="cv.json">
{
    "basics": {
        "name": "Sergio Márquez",
        "label": "Backend Developer | Java & Spring | AI Enthusiast | Docker | Kubernetes",
        "image": "/img/sergio-marquez-perez-profile-picture.webp",
        "imageAlt": "Foto de perfil de Sergio Márquez, Desarrollador Full Stack",
        "email": "sergiomarquezdev@gmail.com",
        "url": "https://sergiomarquez.dev",
        "summary": "Soy Sergio Márquez, Desarrollador Full Stack con experiencia avanzada en Java con Spring Framework y Angular. Domino la creación de aplicaciones web robustas y escalables, y tengo una base sólida en Docker, Kubernetes y CI/CD, lo que me permite automatizar y optimizar los despliegues. He trabajado en proyectos con arquitecturas en la nube, aplicando buenas prácticas de desarrollo (SOLID) para garantizar un código limpio y eficiente.",
        "location": {
            "city": "Leganés",
            "region": "Comunidad de Madrid"
        },
        "profiles": [
            {
                "network": "LinkedIn",
                "username": "sergio-marquez-perez",
                "url": "https://linkedin.com/in/sergio-marquez-perez/"
            },
            {
                "network": "X",
                "username": "smarquezdev",
                "url": "https://x.com/smarquezdev/"
            },
            {
                "network": "GitHub",
                "username": "sergiomarquezdev",
                "url": "https://github.com/sergiomarquezdev/"
            }
        ]
    },

    "work": [
        {
            "company": "VITALY",
            "position": "Desarrollador Full-Stack",
            "website": "https://vitaly.es/",
            "startDate": "2021-04",
            "endDate": null,
            "summary": "Como Desarrollador Full-Stack en VITALY, he tenido una trayectoria creciente, comenzando como programador en prácticas, avanzando a desarrollador full-stack y enfrentando desafíos tanto técnicos durante estos años como culturales durante mi estancia en Dublín.",
            "highlights": [
                {
                    "role": "Desarrollador Full-Stack",
                    "startDate": "2021-06",
                    "endDate": null,
                    "achievements": [
                        "Diseño y desarrollo de APIs middleware con Spring Framework, mejorando la comunicación entre aplicaciones.",
                        "Liderazgo en la migración a Google Kubernetes Engine, optimizando despliegues y automatización.",
                        "Integración de datos tras la fusión de Preving y Cualtis (resultando en Vitaly), asegurando compatibilidad y eficiencia."
                    ]
                },
                {
                    "role": "Desarrollador Full-Stack desde Dublín",
                    "startDate": "2022-06",
                    "endDate": "2022-09",
                    "achievements": [
                        "Desarrollo de aplicaciones full-stack de forma remota desde Dublín, utilizando Java, Spring Framework y Angular, entre otras. Migración de aplicaciones desde servidores a la nube, utilizando Docker, Kubernetes y la plataforma de Google Cloud.",
                        "Mejora significativa en la fluidez en inglés, alcanzando un buen nivel.",
                        "Adaptación y flexibilidad en un entorno internacional, enfrentando desafíos culturales y profesionales."
                    ]
                },
                {
                    "role": "Programador en prácticas",
                    "startDate": "2021-04",
                    "endDate": "2021-06",
                    "achievements": [
                        "Formación intensiva y práctica en tecnologías como Java Spring, Angular, Docker y Kubernetes.",
                        "Contribución en proyectos clave aplicando conocimientos en entornos reales.",
                        "Desarrollo de habilidades de trabajo en equipo y comunicación en un entorno ágil."
                    ]
                }
            ]
        }
    ],

    "education": [
        {
            "institution": "I.E.S. Castelar",
            "url": "https://iescastelar.educarex.es/",
            "area": "Desarrollo de Aplicaciones Multiplataforma",
            "studyType": "Técnico Superior",
            "startDate": "2020-09",
            "endDate": "2021-06",
            "score": "9.83",
            "courses": []
        },
        {
            "institution": "I.E.S. Suárez de Figueroa",
            "url": "https://www.suarezdefigueroa.es/",
            "area": "Desarrollo de Aplicaciones Web",
            "studyType": "Técnico Superior",
            "startDate": "2018-09",
            "endDate": "2020-06",
            "score": "9.30",
            "courses": []
        }
    ],

    "certificates": [
        {
            "name": "EF SET English Certificate 76/100 (C2 Proficient)",
            "date": "2021-09-15",
            "issuer": "EF Standard English Test (EF SET)",
            "url": "https://www.efset.org/cert/Sp9SYB",
            "description": "Certificado de nivel C2 en inglés, validado por la prueba estándar EF SET, lo que avala mi competencia en inglés para entornos laborales y técnicos."
        },
        {
            "name": "Master en Frameworks Javascript: Aprende Angular, React, Vue",
            "date": "2021-11-07",
            "issuer": "Udemy",
            "url": "https://ude.my/UC-873b8fa3-dd9a-40a3-8185-073a5e6df250/",
            "description": "Curso especializado en el aprendizaje de los frameworks más populares de JavaScript: Angular, React y Vue.js, con un enfoque en desarrollo frontend avanzado."
        }
    ],

    "highlightedSkills": [
        { "name": "Java", "icon": "Java" },
        { "name": "Spring Framework", "icon": "Spring" },
        { "name": "Angular", "icon": "Angular" },
        { "name": "Docker", "icon": "Docker" },
        { "name": "Kubernetes", "icon": "Kubernetes" },
        { "name": "CI/CD", "icon": "CICD" }
    ],
    "otherSkills": [
        { "name": "Javascript", "icon": "Javascript" },
        { "name": "Typescript", "icon": "Typescript" },
        { "name": "Node.js", "icon": "Node" },
        { "name": "Python", "icon": "Python" },
        { "name": "Go", "icon": "Go" },
        { "name": "React", "icon": "React" },
        { "name": "Vue.js", "icon": "Vue" },
        { "name": "Astro", "icon": "Astrosvg" }
    ],
    "databasesSkills": [
        { "name": "PostgreSQL", "icon": "PostgreSQL" },
        { "name": "Oracle SQL", "icon": "OracleSQL" },
        { "name": "MySQL", "icon": "MySQL" },
        { "name": "MongoDB", "icon": "MongoDB" },
        { "name": "Firebase", "icon": "Firebase" }
    ],

    "projects": [
        {
            "name": "Portfolio DEV",
            "isActive": true,
            "description": "Portfolio de Sergio Márquez, una aplicación web desarrollada con Astro que muestra mis habilidades, experiencia y proyectos como Desarrollador Full Stack.",
            "highlights": ["Astro", "Typescript", "GitHub Actions"],
            "url": "https://sergiomarquez.dev",
            "github": [
                "https://github.com/sergiomarquezdev/portfolio-dev"
            ]
        },
        {
            "name": "One dAIly Blog",
            "isActive": true,
            "description": "Blog que genera contenido de forma automática a diario utilizando la API de OpenAI. El frontend está desarrollado en Angular y TailwindCSS, mientras que el backend está hecho con Node.js, Express.js y PostgreSQL.",
            "highlights": ["Angular", "Node.js", "OpenAI", "PostgreSQL", "TailwindCSS"],
            "url": "https://blog.sergiomarquez.dev/",
            "github": [
                "https://github.com/sergiomarquezdev/one-daily-blog",
                "https://github.com/sergiomarquezdev/one-daily-blog-backend"
            ]
        },
        {
            "name": "MartaMontalban.es",
            "isActive": true,
            "description": "Desarrollo y diseño del portfolio web de Marta Montalbán, auxiliar de cámara en cine, utilizando WordPress y Elementor Pro, optimizando para SEO y un rendimiento web adecuado con tiempos de carga reducidos. Implementación de buenas prácticas en accesibilidad web y experiencia de usuario.",
            "highlights": ["WordPress", "Elementor Pro"],
            "url": "https://martamontalban.es",
            "github": null
        },
        {
            "name": "Acestream Dockerizado",
            "isActive": true,
            "description": "Proyecto que dockeriza Acestream en un contenedor usando Ubuntu 22.04 y Python 3.10. Este contenedor permite ejecutar Acestream en un entorno aislado y con configuración automática para simplificar su uso. Incluye un script .bat para la instalación automática en Windows.",
            "highlights": ["Docker", "Ubuntu 22.04", "Python 3.10"],
            "url": null,
            "github": ["https://github.com/sergiomarquezdev/acestream-docker-home"]
        },
        {
            "name": "Monitor de Rodajes de Cine",
            "isActive": false,
            "description": "Este script en Python realiza scraping en la página web del Ministerio de Cultura de España para detectar cambios en la sección de rodajes. Cuando se detecta un nuevo documento, el script descarga el PDF actualizado, compara su contenido con la versión anterior y envía un correo electrónico con las diferencias encontradas.",
            "highlights": ["Python", "Scraping", "Automatización"],
            "url": null,
            "github": [
                "https://github.com/sergiomarquezdev/monitor-rodajes-cultura-gob"
            ]
        }
    ]
}
</file>

<file path="package.json">
{
  "name": "portfolio-dev",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro",
    "lint": "eslint . --ext .js,.ts,.astro",
    "lint-fix": "eslint . --ext .js,.ts,.astro --fix",
    "format": "prettier --write .",
    "check": "astro check"
  },
  "dependencies": {
    "@astrojs/check": "0.9.4",
    "@astrojs/partytown": "2.1.3",
    "@astrojs/sitemap": "3.2.1",
    "astro": "5.3.1",
    "typescript": "5.7.3"
  },
  "devDependencies": {
    "@astrojs/tailwind": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "8.25.0",
    "@typescript-eslint/parser": "8.25.0",
    "autoprefixer": "^10.4.20",
    "eslint": "9.21.0",
    "eslint-plugin-astro": "1.3.1",
    "lightningcss": "1.29.1",
    "postcss": "^8.5.3",
    "prettier": "3.5.2",
    "prettier-plugin-astro": "0.14.1",
    "tailwindcss": "^3.4.17",
    "terser": "5.39.0"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/robots.txt">
user-agent: *
Allow: /
Sitemap: https://sergiomarquez.dev/sitemap-index.xml
</file>

<file path="README.md">
# Portfolio de Sergio Márquez - sergiomarquez.dev

![Astro](https://img.shields.io/badge/Astro-5.3.1-orange)
![TypeScript](https://img.shields.io/badge/TypeScript-5.7.3-blue)
![Partytown](https://img.shields.io/badge/Partytown-2.1.3-green)
![Sitemap](https://img.shields.io/badge/Sitemap-3.2.1-brightgreen)
[![Deployment Status](https://github.com/sergiomarquezdev/portfolio-dev/actions/workflows/deploy.yml/badge.svg)](https://github.com/sergiomarquezdev/portfolio-dev/actions/workflows/deploy.yml)

## 🎯 Descripción

Portfolio personal moderno y optimizado para desarrolladores, construido con **Astro**. Diseñado para mostrar mi experiencia como Desarrollador Full Stack, proyectos destacados y habilidades técnicas con un enfoque en rendimiento y SEO.

🌐 [Visitar Portfolio](https://sergiomarquez.dev)

## ✨ Características Principales

- **Rendimiento Optimizado**
  - Construido con Astro 5.3.1 para una carga ultra rápida (<0.5s FCP)
  - Optimización automática de imágenes y recursos estáticos
  - Puntuación perfecta en Lighthouse (Performance, Accessibility, SEO)
  - Uso de Partytown para scripts de terceros sin bloqueo

- **Diseño Profesional**
  - Interfaz minimalista y moderna
  - Diseño totalmente responsive (Mobile-first)
  - Animaciones sutiles con CSS nativo
  - Navegación intuitiva con secciones bien definidas

- **Gestión de Datos**
  - CV estructurado en formato JSON para mantenimiento sencillo
  - Tipado estricto con TypeScript para mayor robustez
  - Interfaces bien definidas para todas las secciones

- **SEO Optimizado**
  - Generación automática de sitemap
  - Metadatos Open Graph y Twitter Cards
  - Schema.org con JSON-LD
  - Rutas semánticas y contenido accesible

- **CI/CD y DevOps**
  - Despliegue automático con GitHub Actions
  - Comprobación de tipos TypeScript en build
  - Optimización de assets durante la compilación
  - Configuración avanzada para minificación CSS con esbuild

- **Accesibilidad**
  - Configuración para pruebas de accesibilidad (WCAG 2.0 AA)
  - Atributos ARIA correctamente implementados
  - Estructura semántica HTML5

## 🛠️ Stack Tecnológico

### Core
- **[Astro](https://astro.build/)** v5.3.1 - Framework web para sitios estáticos de alto rendimiento
- **[TypeScript](https://www.typescriptlang.org/)** v5.7.3 - Superset de JavaScript tipado

### Integraciones
- **[@astrojs/partytown](https://docs.astro.build/en/guides/integrations-guide/partytown/)** v2.1.3 - Para optimización de scripts de terceros
- **[@astrojs/sitemap](https://docs.astro.build/en/guides/integrations-guide/sitemap/)** v3.2.1 - Generación automática de sitemap
- **[@astrojs/check](https://docs.astro.build/en/guides/typescript/)** v0.9.4 - Comprobación de tipos TypeScript

### DevOps
- **GitHub Actions** - CI/CD para despliegue automático
- **VPS propio con Nginx** - Hosting del sitio

### Herramientas de Calidad
- **ESLint** v9.21.0 - Linting de código
- **Prettier** v3.5.2 - Formateo de código
- **Terser** v5.39.0 - Minificación avanzada de JavaScript
- **LightningCSS/esbuild** - Minificación CSS

## 📂 Estructura del Proyecto

```
portfolio-dev/
├── .github/
│   └── workflows/         # Configuraciones de CI/CD (deploy.yml)
├── public/
│   ├── img/              # Imágenes y recursos estáticos
│   ├── robots.txt        # Configuración para crawlers
│   └── favicon.ico       # Icono del sitio
├── src/
│   ├── components/       # Componentes reutilizables
│   │   └── sections/     # Secciones principales del portfolio
│   ├── layouts/          # Plantillas de página (Layout.astro)
│   ├── pages/            # Páginas de la aplicación (index.astro)
│   ├── icons/            # Iconos SVG optimizados
│   ├── cv.d.ts           # Tipos para datos del CV
│   ├── env.d.ts          # Tipos de variables de entorno
│   └── types.d.ts        # Definiciones de tipos globales
├── cv.json               # Datos estructurados del CV
├── accessibility.config.js # Configuración para pruebas de accesibilidad
├── astro.config.mjs      # Configuración de Astro
├── package.json          # Dependencias y scripts
└── tsconfig.json         # Configuración de TypeScript
```

## 🚀 Inicio Rápido

1. **Clonar el repositorio:**

   ```bash
   git clone https://github.com/sergiomarquezdev/portfolio-dev.git
   cd portfolio-dev
   ```

2. **Instalar dependencias:**

   ```bash
   npm install
   ```

3. **Iniciar entorno de desarrollo:**

   ```bash
   npm run dev
   ```

4. **Abrir navegador:**
   Visita `http://localhost:4321`

## 📦 Scripts Disponibles

| Comando | Descripción |
|---------|-------------|
| `npm run dev` | Inicia el servidor de desarrollo local en `localhost:4321` |
| `npm run build` | Comprueba tipos y construye el proyecto para producción |
| `npm run preview` | Previsualiza la build de producción localmente |
| `npm run check` | Ejecuta la comprobación de tipos de TypeScript |
| `npm run lint` | Ejecuta ESLint para verificar la calidad del código |
| `npm run lint-fix` | Corrige automáticamente problemas detectados por ESLint |
| `npm run format` | Formatea el código usando Prettier |

## 🔄 Flujo de Despliegue

El proyecto implementa Integración y Despliegue Continuo (CI/CD):

1. Los cambios en la rama `main` activan automáticamente el workflow de GitHub Actions
2. El proceso de CI/CD:
   - Comprueba la integridad del código con TypeScript
   - Construye la aplicación para producción
   - Prepara el servidor para el despliegue
   - Transfiere los archivos generados al VPS
   - Reinicia Nginx para aplicar los cambios
   - Verifica que el despliegue se ha completado correctamente
3. El sitio queda disponible en [sergiomarquez.dev](https://sergiomarquez.dev)

## 📊 Optimizaciones de Rendimiento

Este portfolio incorpora múltiples optimizaciones para garantizar la mejor experiencia:

- **HTML minificado** mediante la opción `compressHTML` de Astro
- **CSS minificado** usando esbuild o LightningCSS
- **JavaScript optimizado** con Terser, eliminando console.logs y optimizando tamaño
- **División de chunks** inteligente con Rollup
- **Precarga de fuentes** para evitar parpadeos de texto
- **Scripts de terceros** ejecutados con Partytown para no bloquear el renderizado

## 🔍 SEO y Accesibilidad

El proyecto está optimizado para motores de búsqueda y accesibilidad:

- **Meta tags** completos para SEO
- **Open Graph** y Twitter Cards para compartir en redes sociales
- **Schema.org** con JSON-LD para datos estructurados
- **Etiquetas ARIA** para mejorar la navegación con lectores de pantalla
- **Configuración de accesibilidad** para pruebas automatizadas según WCAG 2.0 AA

## 🎨 Personalización

Para personalizar este portfolio para tu uso:

1. Actualiza el archivo `cv.json` con tu información personal y profesional
2. Reemplaza las imágenes en `/public/img/`
3. Modifica los colores y estilos en los componentes
4. Actualiza la configuración en `astro.config.mjs`
5. Adapta las pruebas de accesibilidad en `accessibility.config.js`

## 📝 Licencia

Este proyecto está bajo la Licencia MIT. Consulta el archivo `LICENSE` para más detalles.

## 📧 Contacto

Sergio Márquez

- Twitter/X: [@smarquezdev](https://twitter.com/smarquezdev)
- Email: sergiomarquezdev@gmail.com
- Web: [sergiomarquez.dev](https://sergiomarquez.dev)
- LinkedIn: [Sergio Márquez Pérez](https://www.linkedin.com/in/sergio-marquez-perez/)
- GitHub: [sergiomarquezdev](https://github.com/sergiomarquezdev/)

---

Desarrollado con ❤️ por [Sergio Márquez](https://github.com/sergiomarquezdev)
</file>

<file path="src/components/Header.astro">
---
import { basics } from "@cv";
const { name } = basics;

// Enlaces de navegación
const navLinks = [
  { href: "#sobre-mi", label: "Sobre mí" },
  { href: "#experiencia", label: "Experiencia" },
  { href: "#proyectos", label: "Proyectos" },
  { href: "#habilidades", label: "Habilidades" },
  { href: "#certificados", label: "Certificados" },
  { href: "#educacion", label: "Educación" },
  { href: "#contacto", label: "Contacto" }
];
---

<header class="sticky top-0 z-50 bg-white shadow-sm py-3 px-4 transition-all duration-300">
  <div class="max-w-4xl mx-auto flex justify-between items-center">
    <!-- Logo/Nombre -->
    <a href="#" class="text-lg font-bold text-primary hover:no-underline">
      {name}
    </a>

    <!-- Navegación para pantallas medianas y grandes -->
    <nav class="hidden md:block">
      <ul class="flex space-x-6">
        {navLinks.map(({ href, label }) => (
          <li>
            <a
              href={href}
              class="text-gray-700 hover:text-primary text-sm font-medium transition-colors duration-300 hover:no-underline"
            >
              {label}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- Botón de menú móvil -->
    <button
      id="mobile-menu-button"
      class="md:hidden text-gray-700 hover:text-primary"
      aria-label="Abrir menú de navegación"
    >
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>
  </div>

  <!-- Menú móvil (oculto por defecto) -->
  <div id="mobile-menu" class="hidden md:hidden mt-4 pb-2">
    <nav>
      <ul class="flex flex-col space-y-3">
        {navLinks.map(({ href, label }) => (
          <li>
            <a
              href={href}
              class="block text-gray-700 hover:text-primary text-sm font-medium transition-colors duration-300 hover:no-underline px-4 py-2"
            >
              {label}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<script>
  // Lógica para el menú móvil
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle menú móvil
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });

      // Cerrar menú al hacer clic en un enlace
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
        });
      });
    }

    // Cambiar estilo del header al hacer scroll
    const header = document.querySelector('header');
    if (header) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
          header.classList.add('py-2', 'shadow-md');
          header.classList.remove('py-3', 'shadow-sm');
        } else {
          header.classList.add('py-3', 'shadow-sm');
          header.classList.remove('py-2', 'shadow-md');
        }
      });
    }
  });
</script>

<style>
  /* Animación suave para el header */
  header {
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.95);
  }

  /* Estilo para el enlace activo */
  header nav a.active {
    color: var(--color-primary);
    font-weight: 600;
  }
</style>
</file>

<file path="src/components/Section.astro">
---
const { title } = Astro.props;

// Generamos una ID para el encabezado si existe título
const headingId = title
  ? `section-heading-${title.replace(/\s+/g, "-").toLowerCase()}`
  : "";
---

<section
  aria-labelledby={title ? headingId : undefined}
  aria-label={!title ? "Sección sin título" : undefined}
  class="max-w-4xl mx-auto mb-8 px-6 md:px-8 lg:px-6"
>
  {title && <h2 id={headingId} class="section-title">{title}</h2>}
  <slot />
</section>
</file>

<file path="src/components/sections/About.astro">
---
import Section from "../Section.astro";
import { basics } from "@cv";
const { summary } = basics;
---

<Section title="Sobre mí">
  <div class="card bg-white hover:bg-white">
    <p class="text-lg text-gray-700 leading-relaxed mb-0">
      {summary}
    </p>
  </div>
</Section>

<style>
  .card {
    font-size: 1.1rem;
    line-height: 1.8;
    color: #34495e;
    background: #ffffff;
    padding: 28px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    max-width: 900px;
    margin: 0 auto;
    border-left: 4px solid #1d4e89;
  }

  @media (max-width: 700px) {
    .card {
      padding: 20px;
      font-size: 1rem;
    }
  }
</style>
</file>

<file path="src/components/sections/Certificates.astro">
---
import Section from "../Section.astro";
import { certificates } from "@cv";
import Certificate from "@/icons/Certificate.astro";
---

<Section title="Certificados">
  <ul class="certificates-list">
    {
      certificates.map(({ name, date, issuer, url }) => {
        const dateObj = new Date(date);
        const formattedDate = dateObj.toLocaleDateString("es-ES", {
          year: "numeric",
          month: "long",
        });

        return (
          <li class="certificates-item">
            <article>
              <header>
                <div class="certificate">
                  <h3>{name}</h3>
                  <p class="certificate-issuer">Emitido por {issuer}</p>
                </div>
                <time
                  class="certificate-date"
                  datetime={dateObj.toISOString().split("T")[0]}
                  aria-label={`Fecha de emisión: ${formattedDate}`}
                >
                  {formattedDate}
                </time>
              </header>

              <footer>
                <a
                  href={url}
                  target="_blank"
                  class="certificate-link"
                  title={`Ver el certificado ${name}`}
                  aria-label={`Ver el certificado ${name} emitido por ${issuer}`}
                  rel="noopener noreferrer"
                >
                  {Certificate && <Certificate />} Ver Certificado
                </a>
              </footer>
            </article>
          </li>
        );
      })
    }
  </ul>
</Section>

<style>
  p {
    margin: 0;
  }

  .certificates-list {
    display: flex;
    flex-direction: column;
    gap: 32px;
    padding: 0;
    list-style: none;
  }

  .certificates-item {
    border-left: 5px solid #1d4e89;
    padding-left: 20px;
  }

  .certificates-item article {
    background: #f4f4f4;
    padding: 24px;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .certificate h3 {
    font-weight: 700;
    color: #2c3e50;
    font-size: 1.25rem;
    margin: 0;
  }

  .certificate-issuer {
    margin-top: 6px;
    color: #2c3e50;
    font-size: 1rem;
  }

  .certificate-date {
    color: #333;
    font-size: 1rem;
    font-weight: 400;
    margin-bottom: 12px;
    text-align: right;
  }

  .certificate-link {
    color: #1d4e89;
    text-decoration: none;
    font-weight: 500;
    margin-top: 12px;
    display: inline-flex;
    align-items: center;
    font-size: 1rem;
    gap: 6px;
  }

  .certificate-link:hover {
    text-decoration: underline;
    color: #123456;
  }

  @media (max-width: 700px) {
    .certificates-item {
      border-left: 4px solid #1d4e89;
      padding-left: 12px;
    }

    .certificate-date {
      font-size: 1rem;
    }

    .certificate-link {
      font-size: 1rem;
    }
  }
</style>
</file>

<file path="src/components/sections/Contact.astro">
---
import Section from "../Section.astro";
const WEB3FORMS_API_KEY = import.meta.env.PUBLIC_WEB3FORMS_API_KEY;
---

<Section title="Contacto">
  <div class="card bg-white">
    <form
      action="https://api.web3forms.com/submit"
      method="POST"
      id="form"
      class="contact-form needs-validation"
      novalidate
    >
      <!-- Obligatorio para Web3Forms -->
      <input type="hidden" name="access_key" value={WEB3FORMS_API_KEY} />
      <input
        type="checkbox"
        class="hidden"
        style="display:none"
        name="botcheck"
      />

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="form-group">
          <label for="name" class="block text-gray-700 font-medium mb-2">Nombre</label>
          <input
            type="text"
            id="name"
            name="name"
            required
            aria-describedby="nameFeedback"
            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
            placeholder="Tu nombre completo"
          />
          <div id="nameFeedback" class="empty-feedback invalid-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona tu nombre completo.
          </div>
        </div>

        <div class="form-group">
          <label for="email" class="block text-gray-700 font-medium mb-2">Correo Electrónico</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            aria-describedby="emailFeedback"
            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
            placeholder="tu@email.com"
          />
          <div id="emailFeedback" class="empty-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona tu correo electrónico.
          </div>
          <div class="invalid-feedback text-red-500 text-sm mt-1">
            Por favor, proporciona un correo electrónico válido.
          </div>
        </div>
      </div>

      <div class="form-group mt-6">
        <label for="message" class="block text-gray-700 font-medium mb-2">Mensaje</label>
        <textarea
          id="message"
          name="message"
          minlength="10"
          required
          aria-describedby="messageFeedback"
          class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all h-32"
          placeholder="Escribe tu mensaje aquí..."
        ></textarea>
        <div id="messageFeedback" class="empty-feedback invalid-feedback text-red-500 text-sm mt-1">
          Por favor, ingresa tu mensaje.
        </div>
      </div>

      <div class="mt-6">
        <button
          type="submit"
          class="btn btn-primary px-6 py-3 rounded-lg bg-primary hover:bg-primary-dark text-white font-medium transition-all shadow-sm hover:shadow-md"
        >
          Enviar mensaje
        </button>
      </div>
      <div id="result" class="mt-4 text-center"></div>
    </form>
  </div>
</Section>

<style>
  .contact-form {
    width: 100%;
  }

  .empty-feedback,
  .invalid-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }

  #result {
    display: none;
    font-size: 1rem;
    padding: 12px;
    border-radius: 6px;
  }

  #result.success {
    color: #0d6832;
    background-color: #d1e7dd;
    border: 1px solid #badbcc;
  }

  #result.error {
    color: #842029;
    background-color: #f8d7da;
    border: 1px solid #f5c2c7;
  }

  button.loading {
    position: relative;
    color: transparent;
  }

  button.loading::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    width: 20px;
    height: 20px;
    border: 2px solid #fff;
    border-radius: 50%;
    border-top-color: transparent;
    transform: translate(-50%, -50%);
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("form") as HTMLFormElement | null;
    const result = document.getElementById("result") as HTMLElement | null;
    const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;

    if (!form || !result || !submitButton) {
      console.log("Form, result, or submitButton elements not found.");
      return;
    }

    form.addEventListener("submit", function (e) {
      e.preventDefault();
      form.classList.add("was-validated");

      if (!form.checkValidity()) {
        const invalidElement = form.querySelectorAll(":invalid")[0] as HTMLElement;
        if (invalidElement) invalidElement.focus();
        return;
      }

      const formData = new FormData(form);
      const object = Object.fromEntries(formData);
      const json = JSON.stringify(object);

      // Estado "loading"
      submitButton.classList.add("loading");
      result.innerHTML = 'Enviando...';
      result.classList.remove("error", "success");
      result.style.display = "block";

      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: json,
      })
        .then(async (response) => {
          let json = await response.json();
          if (response.status == 200) {
            result.classList.add("success");
            result.innerHTML = json.message;
            form.reset();
            form.classList.remove("was-validated");
          } else {
            console.log(response);
            result.classList.add("error");
            result.innerHTML = json.message;
          }
        })
        .catch((error) => {
          console.log(error);
          result.innerHTML = "Algo salió mal. Por favor, inténtalo de nuevo.";
          result.classList.add("error");
        })
        .finally(() => {
          submitButton.classList.remove("loading");
          setTimeout(() => {
            result.style.display = "none";
          }, 5000);
        });
    });
  });
</script>
</file>

<file path="src/components/sections/Education.astro">
---
import Section from "../Section.astro"
import { education } from "@cv"
---

<Section title="Educación">
  <ul class="education-list">
    {education.map(({ institution, startDate, endDate, area, score }) => {
      const startDateObj = new Date(startDate)
      const endDateObj = endDate ? new Date(endDate) : null

      const startYear = startDateObj.getFullYear()
      const endYear = endDateObj ? endDateObj.getFullYear() : "Actual"

      const years = `${startYear} - ${endYear}`

      return (
        <li class="education-item">
          <article>
            <header>
              <div class="institution">
                <h3>{institution}</h3>
              </div>
              <time
                class="education-dates"
                datetime={`${startYear}`}
                aria-label={`Años de estudio: ${years}`}
              >
                {years}
              </time>
            </header>

            <footer>
              <p class="education-area">{area}</p>
              {score && <p class="education-score">Nota: {score}</p>}
            </footer>
          </article>
        </li>
      )
    })}
  </ul>
</Section>

<style>
  /* Ajuste para que los párrafos en education tengan margen controlado */
  p {
    margin: 0;
  }

  .education-list {
    display: flex;
    flex-direction: column;
    gap: 32px;
    padding: 0;
    list-style: none;
  }

  .education-item {
    border-left: 5px solid #1d4e89;
    padding-left: 16px;
  }

  .education-item article {
    background: #f4f4f4;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Título de la institución */
  .institution h3 {
    font-weight: 700;
    color: #2c3e50;
    font-size: 1.4rem;
    margin: 0;
  }

  .education-dates {
    color: #333;
    font-size: 1rem;
    text-align: right;
  }

  .education-area {
    margin-top: 16px;
    color: #2c3e50;
    font-size: 1rem;
  }

  .education-score {
    margin-top: 12px;
    color: #34495e;
    font-weight: 600;
    font-size: 1rem;
  }

  @media (max-width: 700px) {
    .education-item {
      padding-left: 12px;
      border-left: 4px solid #1d4e89;
    }

    .education-dates {
      font-size: 1rem;
      margin-top: 8px;
    }

    .education-area {
      font-size: 1rem;
    }

    .education-score {
      font-size: 1rem;
    }
  }
</style>
</file>

<file path="src/components/sections/Experience.astro">
---
import Section from "../Section.astro"
import { work } from "@cv"
---

<Section title="Experiencia laboral">
  <ul class="experience-list">
    {work.map(({ company, startDate, endDate, position, summary, highlights, website }) => {
      const startDateObj = new Date(startDate);
      const endDateObj = endDate ? new Date(endDate) : null;
      const startYearMonth = startDateObj.toLocaleString("es-ES", { year: "numeric", month: "short" });
      const endYearMonth = endDateObj ? endDateObj.toLocaleString("es-ES", { year: "numeric", month: "short" }) : "Actual";

      return (
        <li class="experience-item">
          <article class="card">
            <header class="mb-4">
              <div class="flex flex-col md:flex-row md:justify-between md:items-center">
                <div>
                  <h3 class="text-xl font-bold text-secondary-dark mb-1">
                    <a
                      href={website}
                      target="_blank"
                      title={`Ver ${company}`}
                      aria-label={`Ver la página web de ${company}, donde trabajé como ${position}`}
                      rel="noopener noreferrer"
                      class="hover:text-primary"
                    >
                      {company}
                    </a>
                  </h3>
                  <h4 class="text-lg text-secondary font-medium">{position}</h4>
                </div>

                <div class="experience-dates mt-2 md:mt-0 text-gray-600 font-medium">
                  <time datetime={startDateObj.toISOString().split('T')[0]} data-title={startDate}>
                    {startYearMonth}
                  </time>
                  {" - "}
                  <time datetime={endDateObj ? endDateObj.toISOString().split('T')[0] : ''} data-title={endDate}>
                    {endYearMonth}
                  </time>
                </div>
              </div>
            </header>

            <div class="experience-details">
              <p class="text-gray-700">{summary}</p>
              <ul class="highlights-list space-y-4 mt-4">
                {highlights.map(({ role, startDate, endDate, achievements }) => {
                  const roleStartDateObj = new Date(startDate);
                  const roleEndDateObj = endDate ? new Date(endDate) : null;
                  const roleStartYearMonth = roleStartDateObj.toLocaleString("es-ES", { year: "numeric", month: "short" });
                  const roleEndYearMonth = roleEndDateObj ? roleEndDateObj.toLocaleString("es-ES", { year: "numeric", month: "short" }) : "Actual";

                  return (
                    <li class="highlight-item pl-4 border-l-2 border-primary-light">
                      <strong class="text-secondary-dark block mb-2">{role} ({roleStartYearMonth} - {roleEndYearMonth})</strong>
                      <ul class="achievements-list space-y-2">
                        {achievements.map(achievement => (
                          <li class="flex items-start">
                            <span class="text-primary inline-block mr-2 mt-1">•</span>
                            <span>{achievement}</span>
                          </li>
                        ))}
                      </ul>
                    </li>
                  );
                })}
              </ul>
            </div>
          </article>
        </li>
      );
    })}
  </ul>
</Section>

<style>
  .experience-list {
    display: flex;
    flex-direction: column;
    gap: 32px;
    padding: 0;
    list-style: none;
  }

  .experience-item {
    position: relative;
  }

  .experience-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: linear-gradient(to bottom, #1d4e89, rgba(29, 78, 137, 0.2));
    border-radius: 4px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .experience-item:hover::before {
    opacity: 1;
  }

  .achievements-list {
    list-style: none;
    padding-left: 0;
  }

  @media (max-width: 700px) {
    .experience-list {
      gap: 24px;
    }
  }
</style>
</file>

<file path="src/components/sections/Hero.astro">
---
import { basics } from "@cv";
import Section from "@/components/Section.astro";
import Mail from "@/icons/Mail.astro";
import X from "@/icons/X.astro";
import LinkedIn from "@/icons/LinkedIn.astro";
import GitHub from "@/icons/GitHub.astro";
import WorldMap from "@/icons/WorldMap.astro";
import Blog from "@/icons/Blog.astro";
import type { SocialIcon } from "@/types";

const { name, label, image, imageAlt, location, profiles, email } = basics;
const { city, region } = location;

const SOCIAL_ICONS: SocialIcon = {
  GitHub,
  LinkedIn,
  X,
};

const linkedInfo = profiles.find(({ network }) => network === "LinkedIn");
const linkedUrl = linkedInfo?.url;

const printInfo = [email, linkedUrl].filter(Boolean).join(" • ");
---

<!-- Sin título aquí porque Hero suele tener su propio H1 -->
<div class="bg-gradient-to-r from-white to-gray-100 shadow-sm">
  <Section>
    <div class="flex flex-row items-center justify-between gap-8 py-4 md:py-6 lg:py-8">
      <div class="flex flex-col gap-5 pr-8 md:gap-6">
        <!-- Nombre como H1 para SEO -->
        <h1 class="text-4xl font-bold text-secondary-dark md:text-5xl lg:text-6xl">
          {name}
        </h1>
        <!-- Titular (puesto o especialidad) como H2 -->
        <h2 class="text-xl text-secondary max-w-[90%] font-medium md:text-2xl">
          {label}
        </h2>

        <!-- Localización -->
        <span class="flex items-center gap-2 text-gray-700">
          <WorldMap />
          {city}, {region}
        </span>

        <!-- Información en versión de impresión -->
        <div class="print text-gray-700">
          {printInfo}
        </div>

        <!-- Enlaces a redes sociales y correo -->
        <nav class="no-print mt-4 flex flex-wrap gap-4" aria-label="Redes sociales y contacto">
          {
            email && (
              <a
                href={`mailto:${email}`}
                title={`Enviar un correo a ${email}`}
                aria-label={`Enviar un correo a ${name} (${email})`}
                target="_blank"
                rel="noopener noreferrer"
                class="flex h-11 w-11 items-center justify-center rounded-full border border-gray-200 bg-white transition-all hover:bg-primary hover:text-white hover:shadow-md focus:outline-primary focus:outline-offset-2 hover:no-underline"
              >
                <Mail />
              </a>
            )
          }
          {
            profiles.map(({ network, url }) => {
              const Icon = SOCIAL_ICONS[network];
              return (
                <a
                  href={url}
                  title={`Visitar el perfil de ${name} en ${network}`}
                  aria-label={`Visitar el perfil de ${name} en ${network}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex h-11 w-11 items-center justify-center rounded-full border border-gray-200 bg-white transition-all hover:bg-primary hover:text-white hover:shadow-md focus:outline-primary focus:outline-offset-2 hover:no-underline"
                >
                  <Icon />
                </a>
              );
            })
          }
          <!-- Enlace al blog -->
          <a
            href="https://blog.sergiomarquez.dev"
            class="flex h-11 w-11 items-center justify-center rounded-full border border-gray-200 bg-green-50 transition-all hover:bg-green-500 hover:text-white hover:shadow-md focus:outline-primary focus:outline-offset-2 hover:no-underline"
            title="Visitar mi blog"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Blog />
          </a>
        </nav>
      </div>
      <figure class="relative">
        <div class="absolute inset-0 bg-primary/10 rounded-full -m-2 blur-md"></div>
        <img
          src={image}
          alt={imageAlt}
          width="180"
          height="180"
          class="relative aspect-square w-40 rounded-full object-cover shadow-md border-4 border-white md:w-[180px]"
        />
      </figure>
    </div>
  </Section>
</div>

<style>
  @media (max-width: 700px) {
    div {
      flex-direction: column-reverse;
      padding: 20px;
    }

    div > div {
      justify-content: center;
      align-items: center;
      padding-right: 0;
      text-align: center;
    }

    figure {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    h1 {
      font-size: 2.5rem;
    }

    h2 {
      max-width: 100%;
      font-size: 1.2rem;
    }

    img {
      width: 140px;
    }
  }
</style>
</file>

<file path="src/components/sections/Projects.astro">
---
import GitHub from "@/icons/GitHub.astro";
import Section from "../Section.astro";
import { projects } from "@cv";
---

<Section title="Proyectos">
  <ul class="projects-grid">
    {
      projects.map(
        ({ name, description, highlights, url, github, isActive }) => (
          <li class="project-item">
            <article class="card h-full flex flex-col">
              <header class="flex-1">
                <div class="flex items-center gap-2 mb-3">
                  <h3 class="text-lg font-bold">
                    {url ? (
                      <a
                        href={url}
                        target="_blank"
                        title={`Ver el proyecto ${name}`}
                        aria-label={`Abrir el proyecto ${name} en una nueva pestaña`}
                        rel="noopener noreferrer"
                        class="text-secondary-dark hover:text-primary"
                      >
                        {name}
                      </a>
                    ) : (
                      <span class="text-secondary-dark">{name}</span>
                    )}
                  </h3>
                  {isActive && (
                    <span
                      class="active-indicator inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                      aria-label="Proyecto en activo"
                    >
                      Activo
                    </span>
                  )}
                  {github &&
                    github.map((link) => (
                      <a
                        href={link}
                        target="_blank"
                        class="github-link text-gray-600 hover:text-primary transition-colors"
                        title={`Ver el código fuente de ${name} en GitHub`}
                        aria-label={`Ver el código fuente de ${name} en GitHub en una nueva pestaña`}
                        rel="noopener noreferrer"
                      >
                        <GitHub />
                      </a>
                    ))}
                </div>
                <p class="text-gray-600 mb-4">{description}</p>
              </header>

              <footer class="mt-auto pt-4 border-t border-gray-100">
                <div class="flex flex-wrap gap-2">
                  {highlights.map((highlight) => (
                    <span class="skill-tag text-xs">{highlight}</span>
                  ))}
                </div>
              </footer>
            </article>
          </li>
        )
      )
    }
  </ul>
</Section>

<style>
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 24px;
    margin-inline: 0;
    padding: 0;
    list-style: none;
  }

  .project-item {
    transition: transform 0.3s ease;
  }

  .project-item:hover {
    transform: translateY(-5px);
  }

  .active-indicator {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      opacity: 0.7;
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0.7;
    }
  }

  .skill-tag {
    display: inline-block;
    background: #f0f0f0;
    color: #555;
    padding: 0.3rem 0.6rem;
    border-radius: 50px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .skill-tag:hover {
    background: #e0e0e0;
  }

  @media (max-width: 700px) {
    .projects-grid {
      grid-template-columns: 1fr;
      gap: 16px;
    }
  }
</style>
</file>

<file path="src/components/sections/Skills.astro">
---
import Section from "../Section.astro";
import { highlightedSkills, databasesSkills, otherSkills } from "@cv";

import Java from "@/icons/java.astro";
import Spring from "@/icons/spring.astro";
import Angular from "@/icons/angular.astro";
import Docker from "@/icons/docker.astro";
import Kubernetes from "@/icons/kubernetes.astro";
import CICD from "@/icons/cicd.astro";
import Javascript from "@/icons/javascript.astro";
import Typescript from "@/icons/typescript.astro";
import Node from "@/icons/node.astro";
import Python from "@/icons/python.astro";
import Go from "@/icons/go.astro";
import PostgreSQL from "@/icons/postgresql.astro";
import OracleSQL from "@/icons/oraclesql.astro";
import MySQL from "@/icons/mysql.astro";
import MongoDB from "@/icons/mongodb.astro";
import Firebase from "@/icons/firebase.astro";
import React from "@/icons/react.astro";
import Vue from "@/icons/vue.astro";
import Astrosvg from "@/icons/astrosvg.astro";

const SKILLS_ICONS = {
  Java,
  Spring,
  Angular,
  Docker,
  Kubernetes,
  CICD,
  Javascript,
  Typescript,
  Node,
  Python,
  Go,
  PostgreSQL,
  OracleSQL,
  MySQL,
  MongoDB,
  Firebase,
  React,
  Vue,
  Astrosvg,
} as const;
---

<Section title="Habilidades">
  <div class="card">
    <!-- Habilidades Destacadas -->
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-secondary-dark mb-4">Principales tecnologías</h3>
      <ul class="skills-list highlighted-skills">
        {
          highlightedSkills.map(({ name, icon }) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li class="skill-tag skill-tag-highlight" aria-label={`Habilidad destacada: ${name}`}>
                {IconComponent ? <IconComponent /> : null}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>

    <!-- Otras habilidades -->
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-secondary-dark mb-4">Otras tecnologías</h3>
      <ul class="skills-list">
        {
          otherSkills.map(({ name, icon }) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li class="skill-tag" aria-label={`Habilidad: ${name}`}>
                {IconComponent && <IconComponent />}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>

    <!-- Bases de datos -->
    <div>
      <h3 class="text-lg font-semibold text-secondary-dark mb-4">Bases de datos</h3>
      <ul class="skills-list">
        {
          databasesSkills.map(({ name, icon }) => {
            const IconComponent = SKILLS_ICONS[icon as keyof typeof SKILLS_ICONS];
            return (
              <li class="skill-tag" aria-label={`Base de datos: ${name}`}>
                {IconComponent && <IconComponent />}
                <span>{name}</span>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</Section>

<style>
  .skills-list {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    padding: 0;
    list-style: none;
  }

  .skill-tag {
    display: flex;
    align-items: center;
    gap: 8px;
    background: #f4f4f4;
    border-radius: 50px;
    color: #2c3e50;
    font-size: 0.9rem;
    font-weight: 500;
    padding: 0.5rem 1rem;
    transition: all 0.2s ease;
    border: 1px solid #e0e0e0;
  }

  .skill-tag:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .skill-tag-highlight {
    background: rgba(29, 78, 137, 0.1);
    color: #1d4e89;
    font-weight: 600;
    border-color: rgba(29, 78, 137, 0.2);
  }

  @media (max-width: 700px) {
    .skill-tag {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }
  }
</style>
</file>

<file path="src/cv.d.ts">
export interface CV {
    basics: Basics;
    work: Array<Work>;
    education: Array<Education>;
    certificates: Array<Certificates>;
    skills: Array<Skills>;
    projects: Array<Projects>;
}

interface Basics {
    name: string;
    label: string;
    image: string;
    imageAlt: string;
    email: string;
    url: string;
    summary: string;
    location: Location;
    profiles: Array<Profiles>;
}

interface Location {
    city: string;
    region: string;
}

interface Profiles {
    network: string;
    username: string;
    url: string;
}

interface Work {
    company: string;
    position: string;
    website: string;
    startDate: DateStr;
    endDate: DateStr | null;
    summary: string;
    highlights: Highlight;
}

type DateStr = `${string}-${string}-${string}`;

interface Skills {
    name: string;
    icon: string;
}

interface Certificates {
    name: string;
    date: DateStr;
    issuer: string;
    url: string;
    description: string;
}

interface Education {
    institution: string;
    url: string;
    area: string;
    studyType: string;
    startDate: DateStr;
    endDate: DateStr;
    score: string;
    courses: Array<string>;
}

interface Projects {
    name: string;
    isActive: boolean;
    description: string;
    highlights: Highlight;
    url: string | null;
    github?: string[];
}

type Highlight = Array<String>;
</file>

<file path="src/env.d.ts">
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
</file>

<file path="src/layouts/Layout.astro">
---
import { basics } from "@cv";
import "../styles/global.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
const { summary, url } = basics;
---

<!doctype html>
<html lang="es">
  <head>
    <!-- Meta charset primero para convención -->
    <meta charset="UTF-8" />

    <!-- Título dinámico -->
    <title>{title}</title>
    <meta name="description" content={summary} />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/icon" href="favicon.ico" />

    <!-- Google Tag (gtag.js) con Partytown -->
    <script
      is:inline
      type="text/partytown"
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-S7RNVV6FFQ"></script>
    <script is:inline type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-S7RNVV6FFQ");
    </script>

    <!-- SEO y Open Graph -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={url} />

    <meta property="og:url" content={url} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={summary} />

    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content={url.split("//")[1] ?? ""} />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={summary} />

    <!-- Preconexión y precarga de fuentes -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900&display=swap"
      rel="stylesheet"
    />

    <!-- JSON-LD para Schema.org -->
    <script is:inline type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Person",
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "Madrid",
          "addressCountry": "ES"
        },
        "email": "mailto:sergiomarquezdev@gmail.com",
        "image": "https://sergiomarquez.dev/img/sergio-marquez-perez-profile-picture.webp",
        "jobTitle": "Full Stack Developer",
        "name": "Sergio Márquez",
        "worksFor": {
          "@type": "Organization",
          "name": "VITALY"
        },
        "sameAs": [
          "https://www.linkedin.com/in/sergio-marquez-perez/",
          "https://github.com/sergiomarquezdev/",
          "https://x.com/smarquezdev/"
        ],
        "url": "https://sergiomarquez.dev",
        "description": "Desarrollador Full Stack especializado en Java, Angular, Docker y Kubernetes."
      }
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>
</file>

<file path="src/pages/index.astro">
---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import About from "@/components/sections/About.astro";
import Education from "@/components/sections/Education.astro";
import Experience from "@/components/sections/Experience.astro";
import Hero from "@/components/sections/Hero.astro";
import Projects from "@/components/sections/Projects.astro";
import Skills from "@/components/sections/Skills.astro";
import Certificates from "@/components/sections/Certificates.astro";
import Contact from "@/components/sections/Contact.astro";

import { basics } from "@cv";
const { name, label } = basics;

// Si tu componente Hero no incluye un <h1>, podrías definirlo aquí.
// const pageTitle = `${name} - ${label}`
---

<Layout title={`${name} - ${label}`}>
  <!-- Header con navegación -->
  <Header />

  <!-- Hero con la presentación principal -->
  <Hero />

  <main class="bg-gray-50 pb-16">
    <!-- Sección Sobre Mí -->
    <section id="sobre-mi" aria-labelledby="sobre-mi">
      <About />
    </section>

    <!-- Experiencia laboral - Mantiene posición prioritaria -->
    <section id="experiencia" aria-labelledby="experiencia-laboral">
      <Experience />
    </section>

    <!-- Proyectos - Movido más arriba para destacar tu trabajo práctico -->
    <section id="proyectos" aria-labelledby="proyectos">
      <Projects />
    </section>

    <!-- Habilidades - Movido más arriba para complementar proyectos y experiencia -->
    <section id="habilidades" aria-labelledby="habilidades">
      <Skills />
    </section>

    <!-- Certificados -->
    <section id="certificados" aria-labelledby="certificados">
      <Certificates />
    </section>

    <!-- Educación - Movida más abajo ya que la experiencia práctica suele ser más relevante -->
    <section id="educacion" aria-labelledby="educacion">
      <Education />
    </section>

    <!-- Contacto - Se mantiene al final como llamada a la acción -->
    <section id="contacto" aria-labelledby="contacto">
      <Contact />
    </section>
  </main>

  <footer class="bg-gray-100 py-8 text-center text-gray-600 text-sm">
    <div class="max-w-4xl mx-auto px-6">
      <p>&copy; {new Date().getFullYear()} {name}. Todos los derechos reservados.</p>
      <p class="mt-2">
        Desarrollado con
        <a href="https://astro.build" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">
          Astro
        </a> y
        <a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">
          Tailwind CSS
        </a>
      </p>
    </div>
  </footer>
</Layout>

<script>
  // Script para resaltar la sección activa en la navegación
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('header nav a');

    function highlightActiveSection() {
      let scrollPosition = window.scrollY;

      // Añadir un offset para considerar la altura del header
      const headerHeight = document.querySelector('header')?.offsetHeight || 0;
      scrollPosition += headerHeight + 50; // Añadir margen adicional

      // Encontrar la sección actual
      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        const sectionId = section.getAttribute('id');

        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          // Quitar clase activa de todos los enlaces
          navLinks.forEach(link => {
            link.classList.remove('text-primary', 'font-semibold');
          });

          // Añadir clase activa al enlace correspondiente
          const activeLink = document.querySelector(`header nav a[href="#${sectionId}"]`);
          if (activeLink) {
            activeLink.classList.add('text-primary', 'font-semibold');
          }
        }
      });
    }

    // Ejecutar al cargar la página
    highlightActiveSection();

    // Ejecutar al hacer scroll
    window.addEventListener('scroll', highlightActiveSection);
  });
</script>
</file>

<file path="src/styles/global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    scroll-behavior: smooth;
    letter-spacing: -0.025rem;
    @apply bg-gray-50;
  }

  body,
  figure {
    margin: 0;
    padding: 0;
  }

  a {
    text-decoration: none;
    @apply text-primary transition-colors duration-300;
  }

  a:hover {
    @apply text-primary-dark underline;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4 {
    margin: 0;
    @apply font-heading;
  }

  p {
    @apply text-gray-700 text-base leading-relaxed mb-6;
  }

  .print {
    display: none !important;
  }

  @media print {
    .no-print {
      display: none !important;
    }

    .print {
      display: block !important;
    }

    astro-dev-toolbar {
      display: none !important;
    }

    article {
      break-inside: avoid;
    }
  }
}

@layer components {
  .card {
    @apply bg-white rounded-lg shadow-md p-6 transition-all duration-300 border border-gray-100;
  }

  .card:hover {
    @apply shadow-lg;
  }

  .section-title {
    @apply text-2xl md:text-3xl font-bold text-primary mb-6 pb-2 border-b border-gray-200;
  }

  .btn {
    @apply px-4 py-2 rounded-md transition-colors duration-300 font-medium;
  }

  .btn-primary {
    @apply bg-primary text-white hover:bg-primary-dark;
  }

  .skill-tag {
    @apply inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800;
  }

  .skill-tag-highlight {
    @apply bg-primary/10 text-primary;
  }
}
</file>

<file path="src/types.d.ts">
export type SocialIcon = Record<string, string | any>
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#1d4e89',
          light: '#2c6cb0',
          dark: '#123456',
        },
        secondary: {
          DEFAULT: '#34495e',
          light: '#4a6b8a',
          dark: '#2c3e50',
        },
      },
      fontFamily: {
        sans: [
          'Inter',
          '-apple-system',
          'BlinkMacSystemFont',
          'Roboto',
          'Oxygen',
          'Ubuntu',
          'Cantarell',
          'Fira Sans',
          'Droid Sans',
          'Helvetica Neue',
          'sans-serif',
        ],
        heading: [
          'Montserrat',
          'Gill Sans',
          'Segoe UI',
          'Helvetica Neue',
          'sans-serif',
        ],
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.json">
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@cv": [
        "./cv.json"
      ],
      "@/*": [
        "src/*"
      ]
    },
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "verbatimModuleSyntax": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist", "node_modules"]
}
</file>

</files>
